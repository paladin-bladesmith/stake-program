//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct HarvestSolStakerRewards {
    /// Sol stake view program
    pub sol_stake_view_program: solana_program::pubkey::Pubkey,
    /// Stake config account
    pub config: solana_program::pubkey::Pubkey,
    /// Holder rewards account
    pub vault_holder_rewards: solana_program::pubkey::Pubkey,
    /// SOL staker stake account
    pub sol_staker_stake: solana_program::pubkey::Pubkey,
    /// SOL staker stake authority
    pub sol_staker_stake_authority: solana_program::pubkey::Pubkey,
    /// Native stake account
    pub sol_staker_native_stake: solana_program::pubkey::Pubkey,
    /// Validator stake account
    pub previous_validator_stake: solana_program::pubkey::Pubkey,
    /// Validator stake authority
    pub previous_validator_stake_authority: solana_program::pubkey::Pubkey,
    /// Validator stake account
    pub current_validator_stake: solana_program::pubkey::Pubkey,
    /// Validator stake authority
    pub current_validator_stake_authority: solana_program::pubkey::Pubkey,
    /// Stake history sysvar
    pub sysvar_stake_history: solana_program::pubkey::Pubkey,
    /// Recipient for sol sync bounty
    pub keeper_recipient: Option<solana_program::pubkey::Pubkey>,
}

impl HarvestSolStakerRewards {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.sol_stake_view_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.vault_holder_rewards,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.sol_staker_stake,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.sol_staker_stake_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.sol_staker_native_stake,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.previous_validator_stake,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.previous_validator_stake_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.current_validator_stake,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.current_validator_stake_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.sysvar_stake_history,
            false,
        ));
        if let Some(keeper_recipient) = self.keeper_recipient {
            accounts.push(solana_program::instruction::AccountMeta::new(
                keeper_recipient,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::PALADIN_STAKE_PROGRAM_ID,
                false,
            ));
        }
        accounts.extend_from_slice(remaining_accounts);
        let data = HarvestSolStakerRewardsInstructionData::new()
            .try_to_vec()
            .unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::PALADIN_STAKE_PROGRAM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct HarvestSolStakerRewardsInstructionData {
    discriminator: u8,
}

impl HarvestSolStakerRewardsInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 13 }
    }
}

impl Default for HarvestSolStakerRewardsInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `HarvestSolStakerRewards`.
///
/// ### Accounts:
///
///   0. `[]` sol_stake_view_program
///   1. `[writable]` config
///   2. `[]` vault_holder_rewards
///   3. `[writable]` sol_staker_stake
///   4. `[writable]` sol_staker_stake_authority
///   5. `[]` sol_staker_native_stake
///   6. `[writable]` previous_validator_stake
///   7. `[writable]` previous_validator_stake_authority
///   8. `[writable]` current_validator_stake
///   9. `[writable]` current_validator_stake_authority
///   10. `[optional]` sysvar_stake_history (default to `SysvarStakeHistory1111111111111111111111111`)
///   11. `[writable, optional]` keeper_recipient
#[derive(Clone, Debug, Default)]
pub struct HarvestSolStakerRewardsBuilder {
    sol_stake_view_program: Option<solana_program::pubkey::Pubkey>,
    config: Option<solana_program::pubkey::Pubkey>,
    vault_holder_rewards: Option<solana_program::pubkey::Pubkey>,
    sol_staker_stake: Option<solana_program::pubkey::Pubkey>,
    sol_staker_stake_authority: Option<solana_program::pubkey::Pubkey>,
    sol_staker_native_stake: Option<solana_program::pubkey::Pubkey>,
    previous_validator_stake: Option<solana_program::pubkey::Pubkey>,
    previous_validator_stake_authority: Option<solana_program::pubkey::Pubkey>,
    current_validator_stake: Option<solana_program::pubkey::Pubkey>,
    current_validator_stake_authority: Option<solana_program::pubkey::Pubkey>,
    sysvar_stake_history: Option<solana_program::pubkey::Pubkey>,
    keeper_recipient: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl HarvestSolStakerRewardsBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Sol stake view program
    #[inline(always)]
    pub fn sol_stake_view_program(
        &mut self,
        sol_stake_view_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.sol_stake_view_program = Some(sol_stake_view_program);
        self
    }
    /// Stake config account
    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }
    /// Holder rewards account
    #[inline(always)]
    pub fn vault_holder_rewards(
        &mut self,
        vault_holder_rewards: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.vault_holder_rewards = Some(vault_holder_rewards);
        self
    }
    /// SOL staker stake account
    #[inline(always)]
    pub fn sol_staker_stake(
        &mut self,
        sol_staker_stake: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.sol_staker_stake = Some(sol_staker_stake);
        self
    }
    /// SOL staker stake authority
    #[inline(always)]
    pub fn sol_staker_stake_authority(
        &mut self,
        sol_staker_stake_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.sol_staker_stake_authority = Some(sol_staker_stake_authority);
        self
    }
    /// Native stake account
    #[inline(always)]
    pub fn sol_staker_native_stake(
        &mut self,
        sol_staker_native_stake: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.sol_staker_native_stake = Some(sol_staker_native_stake);
        self
    }
    /// Validator stake account
    #[inline(always)]
    pub fn previous_validator_stake(
        &mut self,
        previous_validator_stake: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.previous_validator_stake = Some(previous_validator_stake);
        self
    }
    /// Validator stake authority
    #[inline(always)]
    pub fn previous_validator_stake_authority(
        &mut self,
        previous_validator_stake_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.previous_validator_stake_authority = Some(previous_validator_stake_authority);
        self
    }
    /// Validator stake account
    #[inline(always)]
    pub fn current_validator_stake(
        &mut self,
        current_validator_stake: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.current_validator_stake = Some(current_validator_stake);
        self
    }
    /// Validator stake authority
    #[inline(always)]
    pub fn current_validator_stake_authority(
        &mut self,
        current_validator_stake_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.current_validator_stake_authority = Some(current_validator_stake_authority);
        self
    }
    /// `[optional account, default to 'SysvarStakeHistory1111111111111111111111111']`
    /// Stake history sysvar
    #[inline(always)]
    pub fn sysvar_stake_history(
        &mut self,
        sysvar_stake_history: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.sysvar_stake_history = Some(sysvar_stake_history);
        self
    }
    /// `[optional account]`
    /// Recipient for sol sync bounty
    #[inline(always)]
    pub fn keeper_recipient(
        &mut self,
        keeper_recipient: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.keeper_recipient = keeper_recipient;
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = HarvestSolStakerRewards {
            sol_stake_view_program: self
                .sol_stake_view_program
                .expect("sol_stake_view_program is not set"),
            config: self.config.expect("config is not set"),
            vault_holder_rewards: self
                .vault_holder_rewards
                .expect("vault_holder_rewards is not set"),
            sol_staker_stake: self.sol_staker_stake.expect("sol_staker_stake is not set"),
            sol_staker_stake_authority: self
                .sol_staker_stake_authority
                .expect("sol_staker_stake_authority is not set"),
            sol_staker_native_stake: self
                .sol_staker_native_stake
                .expect("sol_staker_native_stake is not set"),
            previous_validator_stake: self
                .previous_validator_stake
                .expect("previous_validator_stake is not set"),
            previous_validator_stake_authority: self
                .previous_validator_stake_authority
                .expect("previous_validator_stake_authority is not set"),
            current_validator_stake: self
                .current_validator_stake
                .expect("current_validator_stake is not set"),
            current_validator_stake_authority: self
                .current_validator_stake_authority
                .expect("current_validator_stake_authority is not set"),
            sysvar_stake_history: self.sysvar_stake_history.unwrap_or(solana_program::pubkey!(
                "SysvarStakeHistory1111111111111111111111111"
            )),
            keeper_recipient: self.keeper_recipient,
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `harvest_sol_staker_rewards` CPI accounts.
pub struct HarvestSolStakerRewardsCpiAccounts<'a, 'b> {
    /// Sol stake view program
    pub sol_stake_view_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake config account
    pub config: &'b solana_program::account_info::AccountInfo<'a>,
    /// Holder rewards account
    pub vault_holder_rewards: &'b solana_program::account_info::AccountInfo<'a>,
    /// SOL staker stake account
    pub sol_staker_stake: &'b solana_program::account_info::AccountInfo<'a>,
    /// SOL staker stake authority
    pub sol_staker_stake_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Native stake account
    pub sol_staker_native_stake: &'b solana_program::account_info::AccountInfo<'a>,
    /// Validator stake account
    pub previous_validator_stake: &'b solana_program::account_info::AccountInfo<'a>,
    /// Validator stake authority
    pub previous_validator_stake_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Validator stake account
    pub current_validator_stake: &'b solana_program::account_info::AccountInfo<'a>,
    /// Validator stake authority
    pub current_validator_stake_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake history sysvar
    pub sysvar_stake_history: &'b solana_program::account_info::AccountInfo<'a>,
    /// Recipient for sol sync bounty
    pub keeper_recipient: Option<&'b solana_program::account_info::AccountInfo<'a>>,
}

/// `harvest_sol_staker_rewards` CPI instruction.
pub struct HarvestSolStakerRewardsCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Sol stake view program
    pub sol_stake_view_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake config account
    pub config: &'b solana_program::account_info::AccountInfo<'a>,
    /// Holder rewards account
    pub vault_holder_rewards: &'b solana_program::account_info::AccountInfo<'a>,
    /// SOL staker stake account
    pub sol_staker_stake: &'b solana_program::account_info::AccountInfo<'a>,
    /// SOL staker stake authority
    pub sol_staker_stake_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Native stake account
    pub sol_staker_native_stake: &'b solana_program::account_info::AccountInfo<'a>,
    /// Validator stake account
    pub previous_validator_stake: &'b solana_program::account_info::AccountInfo<'a>,
    /// Validator stake authority
    pub previous_validator_stake_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Validator stake account
    pub current_validator_stake: &'b solana_program::account_info::AccountInfo<'a>,
    /// Validator stake authority
    pub current_validator_stake_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake history sysvar
    pub sysvar_stake_history: &'b solana_program::account_info::AccountInfo<'a>,
    /// Recipient for sol sync bounty
    pub keeper_recipient: Option<&'b solana_program::account_info::AccountInfo<'a>>,
}

impl<'a, 'b> HarvestSolStakerRewardsCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: HarvestSolStakerRewardsCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            sol_stake_view_program: accounts.sol_stake_view_program,
            config: accounts.config,
            vault_holder_rewards: accounts.vault_holder_rewards,
            sol_staker_stake: accounts.sol_staker_stake,
            sol_staker_stake_authority: accounts.sol_staker_stake_authority,
            sol_staker_native_stake: accounts.sol_staker_native_stake,
            previous_validator_stake: accounts.previous_validator_stake,
            previous_validator_stake_authority: accounts.previous_validator_stake_authority,
            current_validator_stake: accounts.current_validator_stake,
            current_validator_stake_authority: accounts.current_validator_stake_authority,
            sysvar_stake_history: accounts.sysvar_stake_history,
            keeper_recipient: accounts.keeper_recipient,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.sol_stake_view_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.vault_holder_rewards.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.sol_staker_stake.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.sol_staker_stake_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.sol_staker_native_stake.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.previous_validator_stake.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.previous_validator_stake_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.current_validator_stake.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.current_validator_stake_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.sysvar_stake_history.key,
            false,
        ));
        if let Some(keeper_recipient) = self.keeper_recipient {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *keeper_recipient.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::PALADIN_STAKE_PROGRAM_ID,
                false,
            ));
        }
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = HarvestSolStakerRewardsInstructionData::new()
            .try_to_vec()
            .unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::PALADIN_STAKE_PROGRAM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(12 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.sol_stake_view_program.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.vault_holder_rewards.clone());
        account_infos.push(self.sol_staker_stake.clone());
        account_infos.push(self.sol_staker_stake_authority.clone());
        account_infos.push(self.sol_staker_native_stake.clone());
        account_infos.push(self.previous_validator_stake.clone());
        account_infos.push(self.previous_validator_stake_authority.clone());
        account_infos.push(self.current_validator_stake.clone());
        account_infos.push(self.current_validator_stake_authority.clone());
        account_infos.push(self.sysvar_stake_history.clone());
        if let Some(keeper_recipient) = self.keeper_recipient {
            account_infos.push(keeper_recipient.clone());
        }
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `HarvestSolStakerRewards` via CPI.
///
/// ### Accounts:
///
///   0. `[]` sol_stake_view_program
///   1. `[writable]` config
///   2. `[]` vault_holder_rewards
///   3. `[writable]` sol_staker_stake
///   4. `[writable]` sol_staker_stake_authority
///   5. `[]` sol_staker_native_stake
///   6. `[writable]` previous_validator_stake
///   7. `[writable]` previous_validator_stake_authority
///   8. `[writable]` current_validator_stake
///   9. `[writable]` current_validator_stake_authority
///   10. `[]` sysvar_stake_history
///   11. `[writable, optional]` keeper_recipient
#[derive(Clone, Debug)]
pub struct HarvestSolStakerRewardsCpiBuilder<'a, 'b> {
    instruction: Box<HarvestSolStakerRewardsCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> HarvestSolStakerRewardsCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(HarvestSolStakerRewardsCpiBuilderInstruction {
            __program: program,
            sol_stake_view_program: None,
            config: None,
            vault_holder_rewards: None,
            sol_staker_stake: None,
            sol_staker_stake_authority: None,
            sol_staker_native_stake: None,
            previous_validator_stake: None,
            previous_validator_stake_authority: None,
            current_validator_stake: None,
            current_validator_stake_authority: None,
            sysvar_stake_history: None,
            keeper_recipient: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// Sol stake view program
    #[inline(always)]
    pub fn sol_stake_view_program(
        &mut self,
        sol_stake_view_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.sol_stake_view_program = Some(sol_stake_view_program);
        self
    }
    /// Stake config account
    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }
    /// Holder rewards account
    #[inline(always)]
    pub fn vault_holder_rewards(
        &mut self,
        vault_holder_rewards: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault_holder_rewards = Some(vault_holder_rewards);
        self
    }
    /// SOL staker stake account
    #[inline(always)]
    pub fn sol_staker_stake(
        &mut self,
        sol_staker_stake: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.sol_staker_stake = Some(sol_staker_stake);
        self
    }
    /// SOL staker stake authority
    #[inline(always)]
    pub fn sol_staker_stake_authority(
        &mut self,
        sol_staker_stake_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.sol_staker_stake_authority = Some(sol_staker_stake_authority);
        self
    }
    /// Native stake account
    #[inline(always)]
    pub fn sol_staker_native_stake(
        &mut self,
        sol_staker_native_stake: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.sol_staker_native_stake = Some(sol_staker_native_stake);
        self
    }
    /// Validator stake account
    #[inline(always)]
    pub fn previous_validator_stake(
        &mut self,
        previous_validator_stake: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.previous_validator_stake = Some(previous_validator_stake);
        self
    }
    /// Validator stake authority
    #[inline(always)]
    pub fn previous_validator_stake_authority(
        &mut self,
        previous_validator_stake_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.previous_validator_stake_authority =
            Some(previous_validator_stake_authority);
        self
    }
    /// Validator stake account
    #[inline(always)]
    pub fn current_validator_stake(
        &mut self,
        current_validator_stake: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.current_validator_stake = Some(current_validator_stake);
        self
    }
    /// Validator stake authority
    #[inline(always)]
    pub fn current_validator_stake_authority(
        &mut self,
        current_validator_stake_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.current_validator_stake_authority =
            Some(current_validator_stake_authority);
        self
    }
    /// Stake history sysvar
    #[inline(always)]
    pub fn sysvar_stake_history(
        &mut self,
        sysvar_stake_history: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.sysvar_stake_history = Some(sysvar_stake_history);
        self
    }
    /// `[optional account]`
    /// Recipient for sol sync bounty
    #[inline(always)]
    pub fn keeper_recipient(
        &mut self,
        keeper_recipient: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.keeper_recipient = keeper_recipient;
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = HarvestSolStakerRewardsCpi {
            __program: self.instruction.__program,

            sol_stake_view_program: self
                .instruction
                .sol_stake_view_program
                .expect("sol_stake_view_program is not set"),

            config: self.instruction.config.expect("config is not set"),

            vault_holder_rewards: self
                .instruction
                .vault_holder_rewards
                .expect("vault_holder_rewards is not set"),

            sol_staker_stake: self
                .instruction
                .sol_staker_stake
                .expect("sol_staker_stake is not set"),

            sol_staker_stake_authority: self
                .instruction
                .sol_staker_stake_authority
                .expect("sol_staker_stake_authority is not set"),

            sol_staker_native_stake: self
                .instruction
                .sol_staker_native_stake
                .expect("sol_staker_native_stake is not set"),

            previous_validator_stake: self
                .instruction
                .previous_validator_stake
                .expect("previous_validator_stake is not set"),

            previous_validator_stake_authority: self
                .instruction
                .previous_validator_stake_authority
                .expect("previous_validator_stake_authority is not set"),

            current_validator_stake: self
                .instruction
                .current_validator_stake
                .expect("current_validator_stake is not set"),

            current_validator_stake_authority: self
                .instruction
                .current_validator_stake_authority
                .expect("current_validator_stake_authority is not set"),

            sysvar_stake_history: self
                .instruction
                .sysvar_stake_history
                .expect("sysvar_stake_history is not set"),

            keeper_recipient: self.instruction.keeper_recipient,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct HarvestSolStakerRewardsCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    sol_stake_view_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault_holder_rewards: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    sol_staker_stake: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    sol_staker_stake_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    sol_staker_native_stake: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    previous_validator_stake: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    previous_validator_stake_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    current_validator_stake: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    current_validator_stake_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    sysvar_stake_history: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    keeper_recipient: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
