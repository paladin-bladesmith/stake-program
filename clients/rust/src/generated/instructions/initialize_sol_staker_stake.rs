//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct InitializeSolStakerStake {
    /// Stake config account
    pub config: solana_program::pubkey::Pubkey,
    /// SOL staker stake account (pda of `['stake::state::sol_staker_stake', stake state, config]`)
    pub stake: solana_program::pubkey::Pubkey,
    /// SOL stake state account
    pub stake_state: solana_program::pubkey::Pubkey,
    /// Stake history sysvar
    pub stake_history: solana_program::pubkey::Pubkey,
    /// System program
    pub system_program: solana_program::pubkey::Pubkey,
    /// Paladin SOL Stake View program
    pub sol_stake_view_program: solana_program::pubkey::Pubkey,
}

impl InitializeSolStakerStake {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.stake, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_history,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.sol_stake_view_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = InitializeSolStakerStakeInstructionData::new()
            .try_to_vec()
            .unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::PALADIN_STAKE_PROGRAM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct InitializeSolStakerStakeInstructionData {
    discriminator: u8,
}

impl InitializeSolStakerStakeInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 12 }
    }
}

impl Default for InitializeSolStakerStakeInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `InitializeSolStakerStake`.
///
/// ### Accounts:
///
///   0. `[]` config
///   1. `[writable]` stake
///   2. `[]` stake_state
///   3. `[optional]` stake_history (default to `SysvarStakeHistory1111111111111111111111111`)
///   4. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   5. `[]` sol_stake_view_program
#[derive(Clone, Debug, Default)]
pub struct InitializeSolStakerStakeBuilder {
    config: Option<solana_program::pubkey::Pubkey>,
    stake: Option<solana_program::pubkey::Pubkey>,
    stake_state: Option<solana_program::pubkey::Pubkey>,
    stake_history: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    sol_stake_view_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeSolStakerStakeBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Stake config account
    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }
    /// SOL staker stake account (pda of `['stake::state::sol_staker_stake', stake state, config]`)
    #[inline(always)]
    pub fn stake(&mut self, stake: solana_program::pubkey::Pubkey) -> &mut Self {
        self.stake = Some(stake);
        self
    }
    /// SOL stake state account
    #[inline(always)]
    pub fn stake_state(&mut self, stake_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.stake_state = Some(stake_state);
        self
    }
    /// `[optional account, default to 'SysvarStakeHistory1111111111111111111111111']`
    /// Stake history sysvar
    #[inline(always)]
    pub fn stake_history(&mut self, stake_history: solana_program::pubkey::Pubkey) -> &mut Self {
        self.stake_history = Some(stake_history);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    /// System program
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// Paladin SOL Stake View program
    #[inline(always)]
    pub fn sol_stake_view_program(
        &mut self,
        sol_stake_view_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.sol_stake_view_program = Some(sol_stake_view_program);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = InitializeSolStakerStake {
            config: self.config.expect("config is not set"),
            stake: self.stake.expect("stake is not set"),
            stake_state: self.stake_state.expect("stake_state is not set"),
            stake_history: self.stake_history.unwrap_or(solana_program::pubkey!(
                "SysvarStakeHistory1111111111111111111111111"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            sol_stake_view_program: self
                .sol_stake_view_program
                .expect("sol_stake_view_program is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `initialize_sol_staker_stake` CPI accounts.
pub struct InitializeSolStakerStakeCpiAccounts<'a, 'b> {
    /// Stake config account
    pub config: &'b solana_program::account_info::AccountInfo<'a>,
    /// SOL staker stake account (pda of `['stake::state::sol_staker_stake', stake state, config]`)
    pub stake: &'b solana_program::account_info::AccountInfo<'a>,
    /// SOL stake state account
    pub stake_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake history sysvar
    pub stake_history: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Paladin SOL Stake View program
    pub sol_stake_view_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `initialize_sol_staker_stake` CPI instruction.
pub struct InitializeSolStakerStakeCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake config account
    pub config: &'b solana_program::account_info::AccountInfo<'a>,
    /// SOL staker stake account (pda of `['stake::state::sol_staker_stake', stake state, config]`)
    pub stake: &'b solana_program::account_info::AccountInfo<'a>,
    /// SOL stake state account
    pub stake_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake history sysvar
    pub stake_history: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Paladin SOL Stake View program
    pub sol_stake_view_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> InitializeSolStakerStakeCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: InitializeSolStakerStakeCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            config: accounts.config,
            stake: accounts.stake,
            stake_state: accounts.stake_state,
            stake_history: accounts.stake_history,
            system_program: accounts.system_program,
            sol_stake_view_program: accounts.sol_stake_view_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.stake.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_history.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.sol_stake_view_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = InitializeSolStakerStakeInstructionData::new()
            .try_to_vec()
            .unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::PALADIN_STAKE_PROGRAM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(6 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.stake.clone());
        account_infos.push(self.stake_state.clone());
        account_infos.push(self.stake_history.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.sol_stake_view_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitializeSolStakerStake` via CPI.
///
/// ### Accounts:
///
///   0. `[]` config
///   1. `[writable]` stake
///   2. `[]` stake_state
///   3. `[]` stake_history
///   4. `[]` system_program
///   5. `[]` sol_stake_view_program
#[derive(Clone, Debug)]
pub struct InitializeSolStakerStakeCpiBuilder<'a, 'b> {
    instruction: Box<InitializeSolStakerStakeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeSolStakerStakeCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializeSolStakerStakeCpiBuilderInstruction {
            __program: program,
            config: None,
            stake: None,
            stake_state: None,
            stake_history: None,
            system_program: None,
            sol_stake_view_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// Stake config account
    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }
    /// SOL staker stake account (pda of `['stake::state::sol_staker_stake', stake state, config]`)
    #[inline(always)]
    pub fn stake(&mut self, stake: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.stake = Some(stake);
        self
    }
    /// SOL stake state account
    #[inline(always)]
    pub fn stake_state(
        &mut self,
        stake_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_state = Some(stake_state);
        self
    }
    /// Stake history sysvar
    #[inline(always)]
    pub fn stake_history(
        &mut self,
        stake_history: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_history = Some(stake_history);
        self
    }
    /// System program
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// Paladin SOL Stake View program
    #[inline(always)]
    pub fn sol_stake_view_program(
        &mut self,
        sol_stake_view_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.sol_stake_view_program = Some(sol_stake_view_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = InitializeSolStakerStakeCpi {
            __program: self.instruction.__program,

            config: self.instruction.config.expect("config is not set"),

            stake: self.instruction.stake.expect("stake is not set"),

            stake_state: self
                .instruction
                .stake_state
                .expect("stake_state is not set"),

            stake_history: self
                .instruction
                .stake_history
                .expect("stake_history is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            sol_stake_view_program: self
                .instruction
                .sol_stake_view_program
                .expect("sol_stake_view_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializeSolStakerStakeCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_history: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    sol_stake_view_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
