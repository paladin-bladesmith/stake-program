//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_program::pubkey::Pubkey;

/// Accounts.
pub struct InitializeConfig {
    /// Stake config account
    pub config: solana_program::pubkey::Pubkey,
    /// Stake token mint
    pub mint: solana_program::pubkey::Pubkey,
    /// Holder rewards pool account
    pub holder_rewards_pool: solana_program::pubkey::Pubkey,
    /// Holder rewards pool account token account
    pub holder_rewards_pool_token_account: solana_program::pubkey::Pubkey,
    /// Stake vault pda
    pub vault_pda: solana_program::pubkey::Pubkey,
    /// Stake vault token account
    pub vault: solana_program::pubkey::Pubkey,
    /// Stake vault holder rewards account
    pub vault_holder_rewards: solana_program::pubkey::Pubkey,
    /// System program.
    pub system_program: solana_program::pubkey::Pubkey,
    /// Paladin rewards program
    pub rewards_program: solana_program::pubkey::Pubkey,
}

impl InitializeConfig {
    pub fn instruction(
        &self,
        args: InitializeConfigInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializeConfigInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.holder_rewards_pool,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.holder_rewards_pool_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.vault_pda,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.vault, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.vault_holder_rewards,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rewards_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = InitializeConfigInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::PALADIN_STAKE_PROGRAM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct InitializeConfigInstructionData {
    discriminator: u8,
}

impl InitializeConfigInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 0 }
    }
}

impl Default for InitializeConfigInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeConfigInstructionArgs {
    pub slash_authority: Pubkey,
    pub config_authority: Pubkey,
    pub cooldown_time_seconds: u64,
    pub max_deactivation_basis_points: u16,
    pub sync_rewards_lamports: u64,
    pub duna_document_hash: [u8; 32],
}

/// Instruction builder for `InitializeConfig`.
///
/// ### Accounts:
///
///   0. `[writable]` config
///   1. `[]` mint
///   2. `[writable]` holder_rewards_pool
///   3. `[]` holder_rewards_pool_token_account
///   4. `[writable]` vault_pda
///   5. `[]` vault
///   6. `[writable]` vault_holder_rewards
///   7. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   8. `[]` rewards_program
#[derive(Clone, Debug, Default)]
pub struct InitializeConfigBuilder {
    config: Option<solana_program::pubkey::Pubkey>,
    mint: Option<solana_program::pubkey::Pubkey>,
    holder_rewards_pool: Option<solana_program::pubkey::Pubkey>,
    holder_rewards_pool_token_account: Option<solana_program::pubkey::Pubkey>,
    vault_pda: Option<solana_program::pubkey::Pubkey>,
    vault: Option<solana_program::pubkey::Pubkey>,
    vault_holder_rewards: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    rewards_program: Option<solana_program::pubkey::Pubkey>,
    slash_authority: Option<Pubkey>,
    config_authority: Option<Pubkey>,
    cooldown_time_seconds: Option<u64>,
    max_deactivation_basis_points: Option<u16>,
    sync_rewards_lamports: Option<u64>,
    duna_document_hash: Option<[u8; 32]>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeConfigBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Stake config account
    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }
    /// Stake token mint
    #[inline(always)]
    pub fn mint(&mut self, mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint = Some(mint);
        self
    }
    /// Holder rewards pool account
    #[inline(always)]
    pub fn holder_rewards_pool(
        &mut self,
        holder_rewards_pool: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.holder_rewards_pool = Some(holder_rewards_pool);
        self
    }
    /// Holder rewards pool account token account
    #[inline(always)]
    pub fn holder_rewards_pool_token_account(
        &mut self,
        holder_rewards_pool_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.holder_rewards_pool_token_account = Some(holder_rewards_pool_token_account);
        self
    }
    /// Stake vault pda
    #[inline(always)]
    pub fn vault_pda(&mut self, vault_pda: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vault_pda = Some(vault_pda);
        self
    }
    /// Stake vault token account
    #[inline(always)]
    pub fn vault(&mut self, vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vault = Some(vault);
        self
    }
    /// Stake vault holder rewards account
    #[inline(always)]
    pub fn vault_holder_rewards(
        &mut self,
        vault_holder_rewards: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.vault_holder_rewards = Some(vault_holder_rewards);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    /// System program.
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// Paladin rewards program
    #[inline(always)]
    pub fn rewards_program(
        &mut self,
        rewards_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.rewards_program = Some(rewards_program);
        self
    }
    #[inline(always)]
    pub fn slash_authority(&mut self, slash_authority: Pubkey) -> &mut Self {
        self.slash_authority = Some(slash_authority);
        self
    }
    #[inline(always)]
    pub fn config_authority(&mut self, config_authority: Pubkey) -> &mut Self {
        self.config_authority = Some(config_authority);
        self
    }
    #[inline(always)]
    pub fn cooldown_time_seconds(&mut self, cooldown_time_seconds: u64) -> &mut Self {
        self.cooldown_time_seconds = Some(cooldown_time_seconds);
        self
    }
    #[inline(always)]
    pub fn max_deactivation_basis_points(
        &mut self,
        max_deactivation_basis_points: u16,
    ) -> &mut Self {
        self.max_deactivation_basis_points = Some(max_deactivation_basis_points);
        self
    }
    #[inline(always)]
    pub fn sync_rewards_lamports(&mut self, sync_rewards_lamports: u64) -> &mut Self {
        self.sync_rewards_lamports = Some(sync_rewards_lamports);
        self
    }
    #[inline(always)]
    pub fn duna_document_hash(&mut self, duna_document_hash: [u8; 32]) -> &mut Self {
        self.duna_document_hash = Some(duna_document_hash);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = InitializeConfig {
            config: self.config.expect("config is not set"),
            mint: self.mint.expect("mint is not set"),
            holder_rewards_pool: self
                .holder_rewards_pool
                .expect("holder_rewards_pool is not set"),
            holder_rewards_pool_token_account: self
                .holder_rewards_pool_token_account
                .expect("holder_rewards_pool_token_account is not set"),
            vault_pda: self.vault_pda.expect("vault_pda is not set"),
            vault: self.vault.expect("vault is not set"),
            vault_holder_rewards: self
                .vault_holder_rewards
                .expect("vault_holder_rewards is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            rewards_program: self.rewards_program.expect("rewards_program is not set"),
        };
        let args = InitializeConfigInstructionArgs {
            slash_authority: self
                .slash_authority
                .clone()
                .expect("slash_authority is not set"),
            config_authority: self
                .config_authority
                .clone()
                .expect("config_authority is not set"),
            cooldown_time_seconds: self
                .cooldown_time_seconds
                .clone()
                .expect("cooldown_time_seconds is not set"),
            max_deactivation_basis_points: self
                .max_deactivation_basis_points
                .clone()
                .expect("max_deactivation_basis_points is not set"),
            sync_rewards_lamports: self
                .sync_rewards_lamports
                .clone()
                .expect("sync_rewards_lamports is not set"),
            duna_document_hash: self
                .duna_document_hash
                .clone()
                .expect("duna_document_hash is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize_config` CPI accounts.
pub struct InitializeConfigCpiAccounts<'a, 'b> {
    /// Stake config account
    pub config: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake token mint
    pub mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Holder rewards pool account
    pub holder_rewards_pool: &'b solana_program::account_info::AccountInfo<'a>,
    /// Holder rewards pool account token account
    pub holder_rewards_pool_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake vault pda
    pub vault_pda: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake vault token account
    pub vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake vault holder rewards account
    pub vault_holder_rewards: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program.
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Paladin rewards program
    pub rewards_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `initialize_config` CPI instruction.
pub struct InitializeConfigCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake config account
    pub config: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake token mint
    pub mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Holder rewards pool account
    pub holder_rewards_pool: &'b solana_program::account_info::AccountInfo<'a>,
    /// Holder rewards pool account token account
    pub holder_rewards_pool_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake vault pda
    pub vault_pda: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake vault token account
    pub vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// Stake vault holder rewards account
    pub vault_holder_rewards: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program.
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Paladin rewards program
    pub rewards_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializeConfigInstructionArgs,
}

impl<'a, 'b> InitializeConfigCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: InitializeConfigCpiAccounts<'a, 'b>,
        args: InitializeConfigInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            config: accounts.config,
            mint: accounts.mint,
            holder_rewards_pool: accounts.holder_rewards_pool,
            holder_rewards_pool_token_account: accounts.holder_rewards_pool_token_account,
            vault_pda: accounts.vault_pda,
            vault: accounts.vault,
            vault_holder_rewards: accounts.vault_holder_rewards,
            system_program: accounts.system_program,
            rewards_program: accounts.rewards_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.holder_rewards_pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.holder_rewards_pool_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vault_pda.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vault_holder_rewards.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rewards_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = InitializeConfigInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::PALADIN_STAKE_PROGRAM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(9 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.mint.clone());
        account_infos.push(self.holder_rewards_pool.clone());
        account_infos.push(self.holder_rewards_pool_token_account.clone());
        account_infos.push(self.vault_pda.clone());
        account_infos.push(self.vault.clone());
        account_infos.push(self.vault_holder_rewards.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.rewards_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitializeConfig` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` config
///   1. `[]` mint
///   2. `[writable]` holder_rewards_pool
///   3. `[]` holder_rewards_pool_token_account
///   4. `[writable]` vault_pda
///   5. `[]` vault
///   6. `[writable]` vault_holder_rewards
///   7. `[]` system_program
///   8. `[]` rewards_program
#[derive(Clone, Debug)]
pub struct InitializeConfigCpiBuilder<'a, 'b> {
    instruction: Box<InitializeConfigCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeConfigCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializeConfigCpiBuilderInstruction {
            __program: program,
            config: None,
            mint: None,
            holder_rewards_pool: None,
            holder_rewards_pool_token_account: None,
            vault_pda: None,
            vault: None,
            vault_holder_rewards: None,
            system_program: None,
            rewards_program: None,
            slash_authority: None,
            config_authority: None,
            cooldown_time_seconds: None,
            max_deactivation_basis_points: None,
            sync_rewards_lamports: None,
            duna_document_hash: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// Stake config account
    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }
    /// Stake token mint
    #[inline(always)]
    pub fn mint(&mut self, mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.mint = Some(mint);
        self
    }
    /// Holder rewards pool account
    #[inline(always)]
    pub fn holder_rewards_pool(
        &mut self,
        holder_rewards_pool: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.holder_rewards_pool = Some(holder_rewards_pool);
        self
    }
    /// Holder rewards pool account token account
    #[inline(always)]
    pub fn holder_rewards_pool_token_account(
        &mut self,
        holder_rewards_pool_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.holder_rewards_pool_token_account =
            Some(holder_rewards_pool_token_account);
        self
    }
    /// Stake vault pda
    #[inline(always)]
    pub fn vault_pda(
        &mut self,
        vault_pda: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault_pda = Some(vault_pda);
        self
    }
    /// Stake vault token account
    #[inline(always)]
    pub fn vault(&mut self, vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.vault = Some(vault);
        self
    }
    /// Stake vault holder rewards account
    #[inline(always)]
    pub fn vault_holder_rewards(
        &mut self,
        vault_holder_rewards: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault_holder_rewards = Some(vault_holder_rewards);
        self
    }
    /// System program.
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// Paladin rewards program
    #[inline(always)]
    pub fn rewards_program(
        &mut self,
        rewards_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.rewards_program = Some(rewards_program);
        self
    }
    #[inline(always)]
    pub fn slash_authority(&mut self, slash_authority: Pubkey) -> &mut Self {
        self.instruction.slash_authority = Some(slash_authority);
        self
    }
    #[inline(always)]
    pub fn config_authority(&mut self, config_authority: Pubkey) -> &mut Self {
        self.instruction.config_authority = Some(config_authority);
        self
    }
    #[inline(always)]
    pub fn cooldown_time_seconds(&mut self, cooldown_time_seconds: u64) -> &mut Self {
        self.instruction.cooldown_time_seconds = Some(cooldown_time_seconds);
        self
    }
    #[inline(always)]
    pub fn max_deactivation_basis_points(
        &mut self,
        max_deactivation_basis_points: u16,
    ) -> &mut Self {
        self.instruction.max_deactivation_basis_points = Some(max_deactivation_basis_points);
        self
    }
    #[inline(always)]
    pub fn sync_rewards_lamports(&mut self, sync_rewards_lamports: u64) -> &mut Self {
        self.instruction.sync_rewards_lamports = Some(sync_rewards_lamports);
        self
    }
    #[inline(always)]
    pub fn duna_document_hash(&mut self, duna_document_hash: [u8; 32]) -> &mut Self {
        self.instruction.duna_document_hash = Some(duna_document_hash);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = InitializeConfigInstructionArgs {
            slash_authority: self
                .instruction
                .slash_authority
                .clone()
                .expect("slash_authority is not set"),
            config_authority: self
                .instruction
                .config_authority
                .clone()
                .expect("config_authority is not set"),
            cooldown_time_seconds: self
                .instruction
                .cooldown_time_seconds
                .clone()
                .expect("cooldown_time_seconds is not set"),
            max_deactivation_basis_points: self
                .instruction
                .max_deactivation_basis_points
                .clone()
                .expect("max_deactivation_basis_points is not set"),
            sync_rewards_lamports: self
                .instruction
                .sync_rewards_lamports
                .clone()
                .expect("sync_rewards_lamports is not set"),
            duna_document_hash: self
                .instruction
                .duna_document_hash
                .clone()
                .expect("duna_document_hash is not set"),
        };
        let instruction = InitializeConfigCpi {
            __program: self.instruction.__program,

            config: self.instruction.config.expect("config is not set"),

            mint: self.instruction.mint.expect("mint is not set"),

            holder_rewards_pool: self
                .instruction
                .holder_rewards_pool
                .expect("holder_rewards_pool is not set"),

            holder_rewards_pool_token_account: self
                .instruction
                .holder_rewards_pool_token_account
                .expect("holder_rewards_pool_token_account is not set"),

            vault_pda: self.instruction.vault_pda.expect("vault_pda is not set"),

            vault: self.instruction.vault.expect("vault is not set"),

            vault_holder_rewards: self
                .instruction
                .vault_holder_rewards
                .expect("vault_holder_rewards is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            rewards_program: self
                .instruction
                .rewards_program
                .expect("rewards_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializeConfigCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    holder_rewards_pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    holder_rewards_pool_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault_pda: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault_holder_rewards: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rewards_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    slash_authority: Option<Pubkey>,
    config_authority: Option<Pubkey>,
    cooldown_time_seconds: Option<u64>,
    max_deactivation_basis_points: Option<u16>,
    sync_rewards_lamports: Option<u64>,
    duna_document_hash: Option<[u8; 32]>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
