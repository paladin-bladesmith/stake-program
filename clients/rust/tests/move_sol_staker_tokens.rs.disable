#![cfg(feature = "test-sbf")]

use paladin_stake_program_client::accounts::SolStakerStake;
use setup::{config::ConfigManager, sol_staker_stake::SolStakerStakeManager};

mod setup;

#[tokio::test]
async fn transfer_to_empty() {
    let context = setup::setup(&[]).await;
    let rent = context.banks_client.get_rent().await.unwrap();

    // Setup the relevant accounts.
    let config_manager = ConfigManager::new(&mut context).await;
    let source_sol_staker_staker_manager = SolStakerStakeManager::new(
        &mut context,
        &config_manager.config,
        &validator_stake_manager.stake,
        &validator_stake_manager.vote,
        5_000_000_000, // 5 SOL staked
    )
    .await;
    let destination_sol_staker_staker_manager = SolStakerStakeManager::new(
        &mut context,
        &config_manager.config,
        &validator_stake_manager.stake,
        &validator_stake_manager.vote,
        5_000_000_000, // 5 SOL staked
    )
    .await;

    // Stake 10 PAL on the source account.
    let source = get_account!(context, source_sol_staker_staker_manager.stake);
    let mut source = SolStakerStake::from_bytes(&source).unwrap();
    source.delegation.active_amount = 10;
    source.delegation.effective_amount = 10;
    context.set_account(&source_sol_staker_staker_manager.stake, &source.into());

    // Transfer 5 PAL to the destination sol staker stake.

    todo!();
}
