/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import { containsBytes, getU8Encoder, type Address } from '@solana/web3.js';
import {
  type ParsedDeactivateStakeInstruction,
  type ParsedDistributeRewardsInstruction,
  type ParsedHarvestHolderRewardsInstruction,
  type ParsedHarvestStakeRewardsInstruction,
  type ParsedInactivateStakeInstruction,
  type ParsedInitializeConfigInstruction,
  type ParsedInitializeStakeInstruction,
  type ParsedSetAuthorityInstruction,
  type ParsedSlashInstruction,
  type ParsedStakeTokensInstruction,
  type ParsedUpdateConfigInstruction,
  type ParsedWithdrawInactiveStakeInstruction,
} from '../instructions';

export const PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS =
  'PStake1111111111111111111111111111111111111' as Address<'PStake1111111111111111111111111111111111111'>;

export enum PaladinStakeProgramAccount {
  Config,
  SolStakerStake,
  ValidatorStake,
}

export enum PaladinStakeProgramInstruction {
  InitializeConfig,
  InitializeStake,
  StakeTokens,
  DeactivateStake,
  InactivateStake,
  WithdrawInactiveStake,
  HarvestHolderRewards,
  HarvestStakeRewards,
  Slash,
  SetAuthority,
  UpdateConfig,
  DistributeRewards,
}

export function identifyPaladinStakeProgramInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): PaladinStakeProgramInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return PaladinStakeProgramInstruction.InitializeConfig;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return PaladinStakeProgramInstruction.InitializeStake;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return PaladinStakeProgramInstruction.StakeTokens;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return PaladinStakeProgramInstruction.DeactivateStake;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return PaladinStakeProgramInstruction.InactivateStake;
  }
  if (containsBytes(data, getU8Encoder().encode(5), 0)) {
    return PaladinStakeProgramInstruction.WithdrawInactiveStake;
  }
  if (containsBytes(data, getU8Encoder().encode(6), 0)) {
    return PaladinStakeProgramInstruction.HarvestHolderRewards;
  }
  if (containsBytes(data, getU8Encoder().encode(7), 0)) {
    return PaladinStakeProgramInstruction.HarvestStakeRewards;
  }
  if (containsBytes(data, getU8Encoder().encode(8), 0)) {
    return PaladinStakeProgramInstruction.Slash;
  }
  if (containsBytes(data, getU8Encoder().encode(9), 0)) {
    return PaladinStakeProgramInstruction.SetAuthority;
  }
  if (containsBytes(data, getU8Encoder().encode(10), 0)) {
    return PaladinStakeProgramInstruction.UpdateConfig;
  }
  if (containsBytes(data, getU8Encoder().encode(11), 0)) {
    return PaladinStakeProgramInstruction.DistributeRewards;
  }
  throw new Error(
    'The provided instruction could not be identified as a paladinStakeProgram instruction.'
  );
}

export type ParsedPaladinStakeProgramInstruction<
  TProgram extends string = 'PStake1111111111111111111111111111111111111',
> =
  | ({
      instructionType: PaladinStakeProgramInstruction.InitializeConfig;
    } & ParsedInitializeConfigInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.InitializeStake;
    } & ParsedInitializeStakeInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.StakeTokens;
    } & ParsedStakeTokensInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.DeactivateStake;
    } & ParsedDeactivateStakeInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.InactivateStake;
    } & ParsedInactivateStakeInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.WithdrawInactiveStake;
    } & ParsedWithdrawInactiveStakeInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.HarvestHolderRewards;
    } & ParsedHarvestHolderRewardsInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.HarvestStakeRewards;
    } & ParsedHarvestStakeRewardsInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.Slash;
    } & ParsedSlashInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.SetAuthority;
    } & ParsedSetAuthorityInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.UpdateConfig;
    } & ParsedUpdateConfigInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.DistributeRewards;
    } & ParsedDistributeRewardsInstruction<TProgram>);
