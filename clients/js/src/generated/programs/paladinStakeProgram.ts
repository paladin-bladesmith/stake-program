/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedHarvestHolderRewardsInstruction,
  type ParsedHarvestSolStakerRewardsInstruction,
  type ParsedHarvestValidatorRewardsInstruction,
  type ParsedInitializeConfigInstruction,
  type ParsedInitializeSolStakerStakeInstruction,
  type ParsedInitializeValidatorStakeInstruction,
  type ParsedSetAuthorityInstruction,
  type ParsedSlashSolStakerStakeInstruction,
  type ParsedSlashValidatorStakeInstruction,
  type ParsedSolStakerMoveTokensInstruction,
  type ParsedSolStakerStakeTokensInstruction,
  type ParsedUnstakeTokensInstruction,
  type ParsedUpdateConfigInstruction,
  type ParsedValidatorOverrideStakedLamportsInstruction,
  type ParsedValidatorStakeTokensInstruction,
  type ParsedValidatorSyncAuthorityInstruction,
} from '../instructions';

export const PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS =
  'GQurxHCYQCNfYR37nHNb6ZiLWg3jpbh2fWv2RpzwGqRK' as Address<'GQurxHCYQCNfYR37nHNb6ZiLWg3jpbh2fWv2RpzwGqRK'>;

export enum PaladinStakeProgramAccount {
  Config,
  SolStakerStake,
  ValidatorStake,
}

export enum PaladinStakeProgramInstruction {
  InitializeConfig,
  InitializeValidatorStake,
  ValidatorStakeTokens,
  HarvestHolderRewards,
  HarvestValidatorRewards,
  SlashValidatorStake,
  SetAuthority,
  UpdateConfig,
  InitializeSolStakerStake,
  SolStakerStakeTokens,
  HarvestSolStakerRewards,
  UnstakeTokens,
  SlashSolStakerStake,
  SolStakerMoveTokens,
  ValidatorOverrideStakedLamports,
  ValidatorSyncAuthority,
}

export function identifyPaladinStakeProgramInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): PaladinStakeProgramInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return PaladinStakeProgramInstruction.InitializeConfig;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return PaladinStakeProgramInstruction.InitializeValidatorStake;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return PaladinStakeProgramInstruction.ValidatorStakeTokens;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return PaladinStakeProgramInstruction.HarvestHolderRewards;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return PaladinStakeProgramInstruction.HarvestValidatorRewards;
  }
  if (containsBytes(data, getU8Encoder().encode(5), 0)) {
    return PaladinStakeProgramInstruction.SlashValidatorStake;
  }
  if (containsBytes(data, getU8Encoder().encode(6), 0)) {
    return PaladinStakeProgramInstruction.SetAuthority;
  }
  if (containsBytes(data, getU8Encoder().encode(7), 0)) {
    return PaladinStakeProgramInstruction.UpdateConfig;
  }
  if (containsBytes(data, getU8Encoder().encode(8), 0)) {
    return PaladinStakeProgramInstruction.InitializeSolStakerStake;
  }
  if (containsBytes(data, getU8Encoder().encode(9), 0)) {
    return PaladinStakeProgramInstruction.SolStakerStakeTokens;
  }
  if (containsBytes(data, getU8Encoder().encode(10), 0)) {
    return PaladinStakeProgramInstruction.HarvestSolStakerRewards;
  }
  if (containsBytes(data, getU8Encoder().encode(11), 0)) {
    return PaladinStakeProgramInstruction.UnstakeTokens;
  }
  if (containsBytes(data, getU8Encoder().encode(12), 0)) {
    return PaladinStakeProgramInstruction.SlashSolStakerStake;
  }
  if (containsBytes(data, getU8Encoder().encode(13), 0)) {
    return PaladinStakeProgramInstruction.SolStakerMoveTokens;
  }
  if (containsBytes(data, getU8Encoder().encode(14), 0)) {
    return PaladinStakeProgramInstruction.ValidatorOverrideStakedLamports;
  }
  if (containsBytes(data, getU8Encoder().encode(15), 0)) {
    return PaladinStakeProgramInstruction.ValidatorSyncAuthority;
  }
  throw new Error(
    'The provided instruction could not be identified as a paladinStakeProgram instruction.'
  );
}

export type ParsedPaladinStakeProgramInstruction<
  TProgram extends string = 'GQurxHCYQCNfYR37nHNb6ZiLWg3jpbh2fWv2RpzwGqRK',
> =
  | ({
      instructionType: PaladinStakeProgramInstruction.InitializeConfig;
    } & ParsedInitializeConfigInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.InitializeValidatorStake;
    } & ParsedInitializeValidatorStakeInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.ValidatorStakeTokens;
    } & ParsedValidatorStakeTokensInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.HarvestHolderRewards;
    } & ParsedHarvestHolderRewardsInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.HarvestValidatorRewards;
    } & ParsedHarvestValidatorRewardsInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.SlashValidatorStake;
    } & ParsedSlashValidatorStakeInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.SetAuthority;
    } & ParsedSetAuthorityInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.UpdateConfig;
    } & ParsedUpdateConfigInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.InitializeSolStakerStake;
    } & ParsedInitializeSolStakerStakeInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.SolStakerStakeTokens;
    } & ParsedSolStakerStakeTokensInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.HarvestSolStakerRewards;
    } & ParsedHarvestSolStakerRewardsInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.UnstakeTokens;
    } & ParsedUnstakeTokensInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.SlashSolStakerStake;
    } & ParsedSlashSolStakerStakeInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.SolStakerMoveTokens;
    } & ParsedSolStakerMoveTokensInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.ValidatorOverrideStakedLamports;
    } & ParsedValidatorOverrideStakedLamportsInstruction<TProgram>)
  | ({
      instructionType: PaladinStakeProgramInstruction.ValidatorSyncAuthority;
    } & ParsedValidatorSyncAuthorityInstruction<TProgram>);
