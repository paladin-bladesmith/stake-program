/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/web3.js';

export type ConfigField =
  | { __kind: 'CooldownTimeSeconds'; fields: readonly [bigint] }
  | { __kind: 'MaxDeactivationBasisPoints'; fields: readonly [number] }
  | { __kind: 'SyncRewardsLamports'; fields: readonly [bigint] };

export type ConfigFieldArgs =
  | { __kind: 'CooldownTimeSeconds'; fields: readonly [number | bigint] }
  | { __kind: 'MaxDeactivationBasisPoints'; fields: readonly [number] }
  | { __kind: 'SyncRewardsLamports'; fields: readonly [number | bigint] };

export function getConfigFieldEncoder(): Encoder<ConfigFieldArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'CooldownTimeSeconds',
      getStructEncoder([['fields', getTupleEncoder([getU64Encoder()])]]),
    ],
    [
      'MaxDeactivationBasisPoints',
      getStructEncoder([['fields', getTupleEncoder([getU16Encoder()])]]),
    ],
    [
      'SyncRewardsLamports',
      getStructEncoder([['fields', getTupleEncoder([getU64Encoder()])]]),
    ],
  ]);
}

export function getConfigFieldDecoder(): Decoder<ConfigField> {
  return getDiscriminatedUnionDecoder([
    [
      'CooldownTimeSeconds',
      getStructDecoder([['fields', getTupleDecoder([getU64Decoder()])]]),
    ],
    [
      'MaxDeactivationBasisPoints',
      getStructDecoder([['fields', getTupleDecoder([getU16Decoder()])]]),
    ],
    [
      'SyncRewardsLamports',
      getStructDecoder([['fields', getTupleDecoder([getU64Decoder()])]]),
    ],
  ]);
}

export function getConfigFieldCodec(): Codec<ConfigFieldArgs, ConfigField> {
  return combineCodec(getConfigFieldEncoder(), getConfigFieldDecoder());
}

// Data Enum Helpers.
export function configField(
  kind: 'CooldownTimeSeconds',
  data: GetDiscriminatedUnionVariantContent<
    ConfigFieldArgs,
    '__kind',
    'CooldownTimeSeconds'
  >['fields']
): GetDiscriminatedUnionVariant<
  ConfigFieldArgs,
  '__kind',
  'CooldownTimeSeconds'
>;
export function configField(
  kind: 'MaxDeactivationBasisPoints',
  data: GetDiscriminatedUnionVariantContent<
    ConfigFieldArgs,
    '__kind',
    'MaxDeactivationBasisPoints'
  >['fields']
): GetDiscriminatedUnionVariant<
  ConfigFieldArgs,
  '__kind',
  'MaxDeactivationBasisPoints'
>;
export function configField(
  kind: 'SyncRewardsLamports',
  data: GetDiscriminatedUnionVariantContent<
    ConfigFieldArgs,
    '__kind',
    'SyncRewardsLamports'
  >['fields']
): GetDiscriminatedUnionVariant<
  ConfigFieldArgs,
  '__kind',
  'SyncRewardsLamports'
>;
export function configField<K extends ConfigFieldArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isConfigField<K extends ConfigField['__kind']>(
  kind: K,
  value: ConfigField
): value is ConfigField & { __kind: K } {
  return value.__kind === kind;
}
