/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/web3.js';
import { PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type HarvestSyncRewardsInstruction<
  TProgram extends string = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountSolStakerStake extends string | IAccountMeta<string> = string,
  TAccountValidatorStake extends string | IAccountMeta<string> = string,
  TAccountSolStake extends string | IAccountMeta<string> = string,
  TAccountDestination extends string | IAccountMeta<string> = string,
  TAccountSysvarStakeHistory extends
    | string
    | IAccountMeta<string> = 'SysvarStakeHistory1111111111111111111111111',
  TAccountSolStakeViewProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountSolStakerStake extends string
        ? WritableAccount<TAccountSolStakerStake>
        : TAccountSolStakerStake,
      TAccountValidatorStake extends string
        ? WritableAccount<TAccountValidatorStake>
        : TAccountValidatorStake,
      TAccountSolStake extends string
        ? ReadonlyAccount<TAccountSolStake>
        : TAccountSolStake,
      TAccountDestination extends string
        ? WritableAccount<TAccountDestination>
        : TAccountDestination,
      TAccountSysvarStakeHistory extends string
        ? ReadonlyAccount<TAccountSysvarStakeHistory>
        : TAccountSysvarStakeHistory,
      TAccountSolStakeViewProgram extends string
        ? ReadonlyAccount<TAccountSolStakeViewProgram>
        : TAccountSolStakeViewProgram,
      ...TRemainingAccounts,
    ]
  >;

export type HarvestSyncRewardsInstructionData = { discriminator: number };

export type HarvestSyncRewardsInstructionDataArgs = {};

export function getHarvestSyncRewardsInstructionDataEncoder(): Encoder<HarvestSyncRewardsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: 16 })
  );
}

export function getHarvestSyncRewardsInstructionDataDecoder(): Decoder<HarvestSyncRewardsInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getHarvestSyncRewardsInstructionDataCodec(): Codec<
  HarvestSyncRewardsInstructionDataArgs,
  HarvestSyncRewardsInstructionData
> {
  return combineCodec(
    getHarvestSyncRewardsInstructionDataEncoder(),
    getHarvestSyncRewardsInstructionDataDecoder()
  );
}

export type HarvestSyncRewardsInput<
  TAccountConfig extends string = string,
  TAccountSolStakerStake extends string = string,
  TAccountValidatorStake extends string = string,
  TAccountSolStake extends string = string,
  TAccountDestination extends string = string,
  TAccountSysvarStakeHistory extends string = string,
  TAccountSolStakeViewProgram extends string = string,
> = {
  /** Stake config account */
  config: Address<TAccountConfig>;
  /** SOL staker stake account (pda of `['stake::state::sol_staker_stake', stake state, config]`) */
  solStakerStake: Address<TAccountSolStakerStake>;
  /** Validator stake account (pda of `['stake::state::validator_stake', validator, config]`) */
  validatorStake: Address<TAccountValidatorStake>;
  /** SOL stake account */
  solStake: Address<TAccountSolStake>;
  /** Destination account for withdrawn lamports */
  destination: Address<TAccountDestination>;
  /** Stake history sysvar */
  sysvarStakeHistory?: Address<TAccountSysvarStakeHistory>;
  /** Paladin SOL Stake View program */
  solStakeViewProgram: Address<TAccountSolStakeViewProgram>;
};

export function getHarvestSyncRewardsInstruction<
  TAccountConfig extends string,
  TAccountSolStakerStake extends string,
  TAccountValidatorStake extends string,
  TAccountSolStake extends string,
  TAccountDestination extends string,
  TAccountSysvarStakeHistory extends string,
  TAccountSolStakeViewProgram extends string,
>(
  input: HarvestSyncRewardsInput<
    TAccountConfig,
    TAccountSolStakerStake,
    TAccountValidatorStake,
    TAccountSolStake,
    TAccountDestination,
    TAccountSysvarStakeHistory,
    TAccountSolStakeViewProgram
  >
): HarvestSyncRewardsInstruction<
  typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountConfig,
  TAccountSolStakerStake,
  TAccountValidatorStake,
  TAccountSolStake,
  TAccountDestination,
  TAccountSysvarStakeHistory,
  TAccountSolStakeViewProgram
> {
  // Program address.
  const programAddress = PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    solStakerStake: { value: input.solStakerStake ?? null, isWritable: true },
    validatorStake: { value: input.validatorStake ?? null, isWritable: true },
    solStake: { value: input.solStake ?? null, isWritable: false },
    destination: { value: input.destination ?? null, isWritable: true },
    sysvarStakeHistory: {
      value: input.sysvarStakeHistory ?? null,
      isWritable: false,
    },
    solStakeViewProgram: {
      value: input.solStakeViewProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.sysvarStakeHistory.value) {
    accounts.sysvarStakeHistory.value =
      'SysvarStakeHistory1111111111111111111111111' as Address<'SysvarStakeHistory1111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.solStakerStake),
      getAccountMeta(accounts.validatorStake),
      getAccountMeta(accounts.solStake),
      getAccountMeta(accounts.destination),
      getAccountMeta(accounts.sysvarStakeHistory),
      getAccountMeta(accounts.solStakeViewProgram),
    ],
    programAddress,
    data: getHarvestSyncRewardsInstructionDataEncoder().encode({}),
  } as HarvestSyncRewardsInstruction<
    typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
    TAccountConfig,
    TAccountSolStakerStake,
    TAccountValidatorStake,
    TAccountSolStake,
    TAccountDestination,
    TAccountSysvarStakeHistory,
    TAccountSolStakeViewProgram
  >;

  return instruction;
}

export type ParsedHarvestSyncRewardsInstruction<
  TProgram extends string = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Stake config account */
    config: TAccountMetas[0];
    /** SOL staker stake account (pda of `['stake::state::sol_staker_stake', stake state, config]`) */
    solStakerStake: TAccountMetas[1];
    /** Validator stake account (pda of `['stake::state::validator_stake', validator, config]`) */
    validatorStake: TAccountMetas[2];
    /** SOL stake account */
    solStake: TAccountMetas[3];
    /** Destination account for withdrawn lamports */
    destination: TAccountMetas[4];
    /** Stake history sysvar */
    sysvarStakeHistory: TAccountMetas[5];
    /** Paladin SOL Stake View program */
    solStakeViewProgram: TAccountMetas[6];
  };
  data: HarvestSyncRewardsInstructionData;
};

export function parseHarvestSyncRewardsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedHarvestSyncRewardsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      solStakerStake: getNextAccount(),
      validatorStake: getNextAccount(),
      solStake: getNextAccount(),
      destination: getNextAccount(),
      sysvarStakeHistory: getNextAccount(),
      solStakeViewProgram: getNextAccount(),
    },
    data: getHarvestSyncRewardsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
