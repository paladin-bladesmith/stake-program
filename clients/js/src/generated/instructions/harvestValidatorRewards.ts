/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type HarvestValidatorRewardsInstruction<
  TProgram extends string = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountValidatorStake extends string | IAccountMeta<string> = string,
  TAccountStakeAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountValidatorStake extends string
        ? WritableAccount<TAccountValidatorStake>
        : TAccountValidatorStake,
      TAccountStakeAuthority extends string
        ? ReadonlySignerAccount<TAccountStakeAuthority> &
            IAccountSignerMeta<TAccountStakeAuthority>
        : TAccountStakeAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type HarvestValidatorRewardsInstructionData = { discriminator: number };

export type HarvestValidatorRewardsInstructionDataArgs = {};

export function getHarvestValidatorRewardsInstructionDataEncoder(): Encoder<HarvestValidatorRewardsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: 7 })
  );
}

export function getHarvestValidatorRewardsInstructionDataDecoder(): Decoder<HarvestValidatorRewardsInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getHarvestValidatorRewardsInstructionDataCodec(): Codec<
  HarvestValidatorRewardsInstructionDataArgs,
  HarvestValidatorRewardsInstructionData
> {
  return combineCodec(
    getHarvestValidatorRewardsInstructionDataEncoder(),
    getHarvestValidatorRewardsInstructionDataDecoder()
  );
}

export type HarvestValidatorRewardsInput<
  TAccountConfig extends string = string,
  TAccountValidatorStake extends string = string,
  TAccountStakeAuthority extends string = string,
> = {
  /** Stake config account */
  config: Address<TAccountConfig>;
  /** Validator stake account (pda of `['stake::state::validator_stake', validator, config]`) */
  validatorStake: Address<TAccountValidatorStake>;
  /** Stake authority */
  stakeAuthority: TransactionSigner<TAccountStakeAuthority>;
};

export function getHarvestValidatorRewardsInstruction<
  TAccountConfig extends string,
  TAccountValidatorStake extends string,
  TAccountStakeAuthority extends string,
>(
  input: HarvestValidatorRewardsInput<
    TAccountConfig,
    TAccountValidatorStake,
    TAccountStakeAuthority
  >
): HarvestValidatorRewardsInstruction<
  typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountConfig,
  TAccountValidatorStake,
  TAccountStakeAuthority
> {
  // Program address.
  const programAddress = PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    validatorStake: { value: input.validatorStake ?? null, isWritable: true },
    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.validatorStake),
      getAccountMeta(accounts.stakeAuthority),
    ],
    programAddress,
    data: getHarvestValidatorRewardsInstructionDataEncoder().encode({}),
  } as HarvestValidatorRewardsInstruction<
    typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
    TAccountConfig,
    TAccountValidatorStake,
    TAccountStakeAuthority
  >;

  return instruction;
}

export type ParsedHarvestValidatorRewardsInstruction<
  TProgram extends string = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Stake config account */
    config: TAccountMetas[0];
    /** Validator stake account (pda of `['stake::state::validator_stake', validator, config]`) */
    validatorStake: TAccountMetas[1];
    /** Stake authority */
    stakeAuthority: TAccountMetas[2];
  };
  data: HarvestValidatorRewardsInstructionData;
};

export function parseHarvestValidatorRewardsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedHarvestValidatorRewardsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      validatorStake: getNextAccount(),
      stakeAuthority: getNextAccount(),
    },
    data: getHarvestValidatorRewardsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
