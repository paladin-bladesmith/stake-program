/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/web3.js';
import { PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_CONFIG_DISCRIMINATOR = 0;

export function getInitializeConfigDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_CONFIG_DISCRIMINATOR);
}

export type InitializeConfigInstruction<
  TProgram extends string = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountHolderRewardsPool extends string | IAccountMeta<string> = string,
  TAccountHolderRewardsPoolTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountVaultPda extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountVaultHolderRewards extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountRewardsProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountHolderRewardsPool extends string
        ? WritableAccount<TAccountHolderRewardsPool>
        : TAccountHolderRewardsPool,
      TAccountHolderRewardsPoolTokenAccount extends string
        ? ReadonlyAccount<TAccountHolderRewardsPoolTokenAccount>
        : TAccountHolderRewardsPoolTokenAccount,
      TAccountVaultPda extends string
        ? WritableAccount<TAccountVaultPda>
        : TAccountVaultPda,
      TAccountVault extends string
        ? ReadonlyAccount<TAccountVault>
        : TAccountVault,
      TAccountVaultHolderRewards extends string
        ? WritableAccount<TAccountVaultHolderRewards>
        : TAccountVaultHolderRewards,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRewardsProgram extends string
        ? ReadonlyAccount<TAccountRewardsProgram>
        : TAccountRewardsProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeConfigInstructionData = {
  discriminator: number;
  slashAuthority: Address;
  configAuthority: Address;
  cooldownTimeSeconds: bigint;
  maxDeactivationBasisPoints: number;
  syncRewardsLamports: bigint;
  dunaDocumentHash: ReadonlyUint8Array;
};

export type InitializeConfigInstructionDataArgs = {
  slashAuthority: Address;
  configAuthority: Address;
  cooldownTimeSeconds: number | bigint;
  maxDeactivationBasisPoints: number;
  syncRewardsLamports: number | bigint;
  dunaDocumentHash: ReadonlyUint8Array;
};

export function getInitializeConfigInstructionDataEncoder(): Encoder<InitializeConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['slashAuthority', getAddressEncoder()],
      ['configAuthority', getAddressEncoder()],
      ['cooldownTimeSeconds', getU64Encoder()],
      ['maxDeactivationBasisPoints', getU16Encoder()],
      ['syncRewardsLamports', getU64Encoder()],
      ['dunaDocumentHash', fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_CONFIG_DISCRIMINATOR })
  );
}

export function getInitializeConfigInstructionDataDecoder(): Decoder<InitializeConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['slashAuthority', getAddressDecoder()],
    ['configAuthority', getAddressDecoder()],
    ['cooldownTimeSeconds', getU64Decoder()],
    ['maxDeactivationBasisPoints', getU16Decoder()],
    ['syncRewardsLamports', getU64Decoder()],
    ['dunaDocumentHash', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getInitializeConfigInstructionDataCodec(): Codec<
  InitializeConfigInstructionDataArgs,
  InitializeConfigInstructionData
> {
  return combineCodec(
    getInitializeConfigInstructionDataEncoder(),
    getInitializeConfigInstructionDataDecoder()
  );
}

export type InitializeConfigInput<
  TAccountConfig extends string = string,
  TAccountMint extends string = string,
  TAccountHolderRewardsPool extends string = string,
  TAccountHolderRewardsPoolTokenAccount extends string = string,
  TAccountVaultPda extends string = string,
  TAccountVault extends string = string,
  TAccountVaultHolderRewards extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRewardsProgram extends string = string,
> = {
  /** Stake config account */
  config: Address<TAccountConfig>;
  /** Stake token mint */
  mint: Address<TAccountMint>;
  /** Holder rewards pool account */
  holderRewardsPool: Address<TAccountHolderRewardsPool>;
  /** Holder rewards pool account token account */
  holderRewardsPoolTokenAccount: Address<TAccountHolderRewardsPoolTokenAccount>;
  /** Stake vault pda */
  vaultPda: Address<TAccountVaultPda>;
  /** Stake vault token account */
  vault: Address<TAccountVault>;
  /** Stake vault holder rewards account */
  vaultHolderRewards: Address<TAccountVaultHolderRewards>;
  /** System program. */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Paladin rewards program */
  rewardsProgram: Address<TAccountRewardsProgram>;
  slashAuthority: InitializeConfigInstructionDataArgs['slashAuthority'];
  configAuthority: InitializeConfigInstructionDataArgs['configAuthority'];
  cooldownTimeSeconds: InitializeConfigInstructionDataArgs['cooldownTimeSeconds'];
  maxDeactivationBasisPoints: InitializeConfigInstructionDataArgs['maxDeactivationBasisPoints'];
  syncRewardsLamports: InitializeConfigInstructionDataArgs['syncRewardsLamports'];
  dunaDocumentHash: InitializeConfigInstructionDataArgs['dunaDocumentHash'];
};

export function getInitializeConfigInstruction<
  TAccountConfig extends string,
  TAccountMint extends string,
  TAccountHolderRewardsPool extends string,
  TAccountHolderRewardsPoolTokenAccount extends string,
  TAccountVaultPda extends string,
  TAccountVault extends string,
  TAccountVaultHolderRewards extends string,
  TAccountSystemProgram extends string,
  TAccountRewardsProgram extends string,
  TProgramAddress extends
    Address = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
>(
  input: InitializeConfigInput<
    TAccountConfig,
    TAccountMint,
    TAccountHolderRewardsPool,
    TAccountHolderRewardsPoolTokenAccount,
    TAccountVaultPda,
    TAccountVault,
    TAccountVaultHolderRewards,
    TAccountSystemProgram,
    TAccountRewardsProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeConfigInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountMint,
  TAccountHolderRewardsPool,
  TAccountHolderRewardsPoolTokenAccount,
  TAccountVaultPda,
  TAccountVault,
  TAccountVaultHolderRewards,
  TAccountSystemProgram,
  TAccountRewardsProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    holderRewardsPool: {
      value: input.holderRewardsPool ?? null,
      isWritable: true,
    },
    holderRewardsPoolTokenAccount: {
      value: input.holderRewardsPoolTokenAccount ?? null,
      isWritable: false,
    },
    vaultPda: { value: input.vaultPda ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: false },
    vaultHolderRewards: {
      value: input.vaultHolderRewards ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rewardsProgram: { value: input.rewardsProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.holderRewardsPool),
      getAccountMeta(accounts.holderRewardsPoolTokenAccount),
      getAccountMeta(accounts.vaultPda),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.vaultHolderRewards),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rewardsProgram),
    ],
    programAddress,
    data: getInitializeConfigInstructionDataEncoder().encode(
      args as InitializeConfigInstructionDataArgs
    ),
  } as InitializeConfigInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountMint,
    TAccountHolderRewardsPool,
    TAccountHolderRewardsPoolTokenAccount,
    TAccountVaultPda,
    TAccountVault,
    TAccountVaultHolderRewards,
    TAccountSystemProgram,
    TAccountRewardsProgram
  >;

  return instruction;
}

export type ParsedInitializeConfigInstruction<
  TProgram extends string = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Stake config account */
    config: TAccountMetas[0];
    /** Stake token mint */
    mint: TAccountMetas[1];
    /** Holder rewards pool account */
    holderRewardsPool: TAccountMetas[2];
    /** Holder rewards pool account token account */
    holderRewardsPoolTokenAccount: TAccountMetas[3];
    /** Stake vault pda */
    vaultPda: TAccountMetas[4];
    /** Stake vault token account */
    vault: TAccountMetas[5];
    /** Stake vault holder rewards account */
    vaultHolderRewards: TAccountMetas[6];
    /** System program. */
    systemProgram: TAccountMetas[7];
    /** Paladin rewards program */
    rewardsProgram: TAccountMetas[8];
  };
  data: InitializeConfigInstructionData;
};

export function parseInitializeConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      mint: getNextAccount(),
      holderRewardsPool: getNextAccount(),
      holderRewardsPoolTokenAccount: getNextAccount(),
      vaultPda: getNextAccount(),
      vault: getNextAccount(),
      vaultHolderRewards: getNextAccount(),
      systemProgram: getNextAccount(),
      rewardsProgram: getNextAccount(),
    },
    data: getInitializeConfigInstructionDataDecoder().decode(instruction.data),
  };
}
