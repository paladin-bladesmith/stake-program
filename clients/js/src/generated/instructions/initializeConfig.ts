/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/web3.js';
import { PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type InitializeConfigInstruction<
  TProgram extends string = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountSlashAuthority extends string | IAccountMeta<string> = string,
  TAccountConfigAuthority extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountSlashAuthority extends string
        ? ReadonlyAccount<TAccountSlashAuthority>
        : TAccountSlashAuthority,
      TAccountConfigAuthority extends string
        ? ReadonlyAccount<TAccountConfigAuthority>
        : TAccountConfigAuthority,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountVault extends string
        ? ReadonlyAccount<TAccountVault>
        : TAccountVault,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeConfigInstructionData = {
  discriminator: number;
  cooldownTimeSeconds: bigint;
  maxDeactivationBasisPoints: number;
  syncRewardsLamports: bigint;
};

export type InitializeConfigInstructionDataArgs = {
  cooldownTimeSeconds: number | bigint;
  maxDeactivationBasisPoints: number;
  syncRewardsLamports: number | bigint;
};

export function getInitializeConfigInstructionDataEncoder(): Encoder<InitializeConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['cooldownTimeSeconds', getU64Encoder()],
      ['maxDeactivationBasisPoints', getU16Encoder()],
      ['syncRewardsLamports', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 0 })
  );
}

export function getInitializeConfigInstructionDataDecoder(): Decoder<InitializeConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['cooldownTimeSeconds', getU64Decoder()],
    ['maxDeactivationBasisPoints', getU16Decoder()],
    ['syncRewardsLamports', getU64Decoder()],
  ]);
}

export function getInitializeConfigInstructionDataCodec(): Codec<
  InitializeConfigInstructionDataArgs,
  InitializeConfigInstructionData
> {
  return combineCodec(
    getInitializeConfigInstructionDataEncoder(),
    getInitializeConfigInstructionDataDecoder()
  );
}

export type InitializeConfigInput<
  TAccountConfig extends string = string,
  TAccountSlashAuthority extends string = string,
  TAccountConfigAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountVault extends string = string,
> = {
  /** Stake config account */
  config: Address<TAccountConfig>;
  /** Slash authority */
  slashAuthority: Address<TAccountSlashAuthority>;
  /** Config authority */
  configAuthority: Address<TAccountConfigAuthority>;
  /** Stake token mint */
  mint: Address<TAccountMint>;
  /** Stake vault token account */
  vault: Address<TAccountVault>;
  cooldownTimeSeconds: InitializeConfigInstructionDataArgs['cooldownTimeSeconds'];
  maxDeactivationBasisPoints: InitializeConfigInstructionDataArgs['maxDeactivationBasisPoints'];
  syncRewardsLamports: InitializeConfigInstructionDataArgs['syncRewardsLamports'];
};

export function getInitializeConfigInstruction<
  TAccountConfig extends string,
  TAccountSlashAuthority extends string,
  TAccountConfigAuthority extends string,
  TAccountMint extends string,
  TAccountVault extends string,
>(
  input: InitializeConfigInput<
    TAccountConfig,
    TAccountSlashAuthority,
    TAccountConfigAuthority,
    TAccountMint,
    TAccountVault
  >
): InitializeConfigInstruction<
  typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountConfig,
  TAccountSlashAuthority,
  TAccountConfigAuthority,
  TAccountMint,
  TAccountVault
> {
  // Program address.
  const programAddress = PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    slashAuthority: { value: input.slashAuthority ?? null, isWritable: false },
    configAuthority: {
      value: input.configAuthority ?? null,
      isWritable: false,
    },
    mint: { value: input.mint ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.slashAuthority),
      getAccountMeta(accounts.configAuthority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.vault),
    ],
    programAddress,
    data: getInitializeConfigInstructionDataEncoder().encode(
      args as InitializeConfigInstructionDataArgs
    ),
  } as InitializeConfigInstruction<
    typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
    TAccountConfig,
    TAccountSlashAuthority,
    TAccountConfigAuthority,
    TAccountMint,
    TAccountVault
  >;

  return instruction;
}

export type ParsedInitializeConfigInstruction<
  TProgram extends string = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Stake config account */
    config: TAccountMetas[0];
    /** Slash authority */
    slashAuthority: TAccountMetas[1];
    /** Config authority */
    configAuthority: TAccountMetas[2];
    /** Stake token mint */
    mint: TAccountMetas[3];
    /** Stake vault token account */
    vault: TAccountMetas[4];
  };
  data: InitializeConfigInstructionData;
};

export function parseInitializeConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      slashAuthority: getNextAccount(),
      configAuthority: getNextAccount(),
      mint: getNextAccount(),
      vault: getNextAccount(),
    },
    data: getInitializeConfigInstructionDataDecoder().decode(instruction.data),
  };
}
