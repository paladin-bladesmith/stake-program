/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SOL_STAKER_SET_AUTHORITY_OVERRIDE_DISCRIMINATOR = 15;

export function getSolStakerSetAuthorityOverrideDiscriminatorBytes() {
  return getU8Encoder().encode(SOL_STAKER_SET_AUTHORITY_OVERRIDE_DISCRIMINATOR);
}

export type SolStakerSetAuthorityOverrideInstruction<
  TProgram extends string = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountConfigAuthority extends string | IAccountMeta<string> = string,
  TAccountSolStakerAuthorityOverride extends
    | string
    | IAccountMeta<string> = string,
  TAccountSystemProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountConfigAuthority extends string
        ? ReadonlySignerAccount<TAccountConfigAuthority> &
            IAccountSignerMeta<TAccountConfigAuthority>
        : TAccountConfigAuthority,
      TAccountSolStakerAuthorityOverride extends string
        ? WritableAccount<TAccountSolStakerAuthorityOverride>
        : TAccountSolStakerAuthorityOverride,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SolStakerSetAuthorityOverrideInstructionData = {
  discriminator: number;
  authorityOriginal: Address;
  authorityOverride: Address;
};

export type SolStakerSetAuthorityOverrideInstructionDataArgs = {
  authorityOriginal: Address;
  authorityOverride: Address;
};

export function getSolStakerSetAuthorityOverrideInstructionDataEncoder(): Encoder<SolStakerSetAuthorityOverrideInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['authorityOriginal', getAddressEncoder()],
      ['authorityOverride', getAddressEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: SOL_STAKER_SET_AUTHORITY_OVERRIDE_DISCRIMINATOR,
    })
  );
}

export function getSolStakerSetAuthorityOverrideInstructionDataDecoder(): Decoder<SolStakerSetAuthorityOverrideInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['authorityOriginal', getAddressDecoder()],
    ['authorityOverride', getAddressDecoder()],
  ]);
}

export function getSolStakerSetAuthorityOverrideInstructionDataCodec(): Codec<
  SolStakerSetAuthorityOverrideInstructionDataArgs,
  SolStakerSetAuthorityOverrideInstructionData
> {
  return combineCodec(
    getSolStakerSetAuthorityOverrideInstructionDataEncoder(),
    getSolStakerSetAuthorityOverrideInstructionDataDecoder()
  );
}

export type SolStakerSetAuthorityOverrideInput<
  TAccountConfig extends string = string,
  TAccountConfigAuthority extends string = string,
  TAccountSolStakerAuthorityOverride extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Config */
  config: Address<TAccountConfig>;
  /** Config authority */
  configAuthority: TransactionSigner<TAccountConfigAuthority>;
  /** Sol staker authority override */
  solStakerAuthorityOverride: Address<TAccountSolStakerAuthorityOverride>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
  authorityOriginal: SolStakerSetAuthorityOverrideInstructionDataArgs['authorityOriginal'];
  authorityOverride: SolStakerSetAuthorityOverrideInstructionDataArgs['authorityOverride'];
};

export function getSolStakerSetAuthorityOverrideInstruction<
  TAccountConfig extends string,
  TAccountConfigAuthority extends string,
  TAccountSolStakerAuthorityOverride extends string,
  TAccountSystemProgram extends string,
>(
  input: SolStakerSetAuthorityOverrideInput<
    TAccountConfig,
    TAccountConfigAuthority,
    TAccountSolStakerAuthorityOverride,
    TAccountSystemProgram
  >
): SolStakerSetAuthorityOverrideInstruction<
  typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountConfig,
  TAccountConfigAuthority,
  TAccountSolStakerAuthorityOverride,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    configAuthority: {
      value: input.configAuthority ?? null,
      isWritable: false,
    },
    solStakerAuthorityOverride: {
      value: input.solStakerAuthorityOverride ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.configAuthority),
      getAccountMeta(accounts.solStakerAuthorityOverride),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getSolStakerSetAuthorityOverrideInstructionDataEncoder().encode(
      args as SolStakerSetAuthorityOverrideInstructionDataArgs
    ),
  } as SolStakerSetAuthorityOverrideInstruction<
    typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
    TAccountConfig,
    TAccountConfigAuthority,
    TAccountSolStakerAuthorityOverride,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedSolStakerSetAuthorityOverrideInstruction<
  TProgram extends string = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Config */
    config: TAccountMetas[0];
    /** Config authority */
    configAuthority: TAccountMetas[1];
    /** Sol staker authority override */
    solStakerAuthorityOverride: TAccountMetas[2];
    /** System program */
    systemProgram?: TAccountMetas[3] | undefined;
  };
  data: SolStakerSetAuthorityOverrideInstructionData;
};

export function parseSolStakerSetAuthorityOverrideInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSolStakerSetAuthorityOverrideInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      configAuthority: getNextAccount(),
      solStakerAuthorityOverride: getNextAccount(),
      systemProgram: getNextOptionalAccount(),
    },
    data: getSolStakerSetAuthorityOverrideInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
