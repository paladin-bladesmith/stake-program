/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const VALIDATOR_STAKE_TOKENS_DISCRIMINATOR = 2;

export function getValidatorStakeTokensDiscriminatorBytes() {
  return getU8Encoder().encode(VALIDATOR_STAKE_TOKENS_DISCRIMINATOR);
}

export type ValidatorStakeTokensInstruction<
  TProgram extends string = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountHolderRewardsPool extends string | IAccountMeta<string> = string,
  TAccountHolderRewardsPoolTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountValidatorStake extends string | IAccountMeta<string> = string,
  TAccountValidatorStakeAuthority extends
    | string
    | IAccountMeta<string> = string,
  TAccountSourceTokenAccount extends string | IAccountMeta<string> = string,
  TAccountSourceTokenAccountAuthority extends
    | string
    | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountVaultPda extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountVaultHolderRewards extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountRewardsProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountHolderRewardsPool extends string
        ? WritableAccount<TAccountHolderRewardsPool>
        : TAccountHolderRewardsPool,
      TAccountHolderRewardsPoolTokenAccount extends string
        ? WritableAccount<TAccountHolderRewardsPoolTokenAccount>
        : TAccountHolderRewardsPoolTokenAccount,
      TAccountValidatorStake extends string
        ? WritableAccount<TAccountValidatorStake>
        : TAccountValidatorStake,
      TAccountValidatorStakeAuthority extends string
        ? ReadonlyAccount<TAccountValidatorStakeAuthority>
        : TAccountValidatorStakeAuthority,
      TAccountSourceTokenAccount extends string
        ? WritableAccount<TAccountSourceTokenAccount>
        : TAccountSourceTokenAccount,
      TAccountSourceTokenAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountSourceTokenAccountAuthority> &
            IAccountSignerMeta<TAccountSourceTokenAccountAuthority>
        : TAccountSourceTokenAccountAuthority,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountVaultPda extends string
        ? WritableAccount<TAccountVaultPda>
        : TAccountVaultPda,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountVaultHolderRewards extends string
        ? WritableAccount<TAccountVaultHolderRewards>
        : TAccountVaultHolderRewards,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountRewardsProgram extends string
        ? ReadonlyAccount<TAccountRewardsProgram>
        : TAccountRewardsProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ValidatorStakeTokensInstructionData = {
  discriminator: number;
  amount: bigint;
};

export type ValidatorStakeTokensInstructionDataArgs = {
  amount: number | bigint;
};

export function getValidatorStakeTokensInstructionDataEncoder(): Encoder<ValidatorStakeTokensInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: VALIDATOR_STAKE_TOKENS_DISCRIMINATOR,
    })
  );
}

export function getValidatorStakeTokensInstructionDataDecoder(): Decoder<ValidatorStakeTokensInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['amount', getU64Decoder()],
  ]);
}

export function getValidatorStakeTokensInstructionDataCodec(): Codec<
  ValidatorStakeTokensInstructionDataArgs,
  ValidatorStakeTokensInstructionData
> {
  return combineCodec(
    getValidatorStakeTokensInstructionDataEncoder(),
    getValidatorStakeTokensInstructionDataDecoder()
  );
}

export type ValidatorStakeTokensInput<
  TAccountConfig extends string = string,
  TAccountHolderRewardsPool extends string = string,
  TAccountHolderRewardsPoolTokenAccount extends string = string,
  TAccountValidatorStake extends string = string,
  TAccountValidatorStakeAuthority extends string = string,
  TAccountSourceTokenAccount extends string = string,
  TAccountSourceTokenAccountAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountVaultPda extends string = string,
  TAccountVault extends string = string,
  TAccountVaultHolderRewards extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRewardsProgram extends string = string,
> = {
  /** Stake config account */
  config: Address<TAccountConfig>;
  /** Holder rewards pool account */
  holderRewardsPool: Address<TAccountHolderRewardsPool>;
  /** Holder rewards pool account token account */
  holderRewardsPoolTokenAccount: Address<TAccountHolderRewardsPoolTokenAccount>;
  /** Validator stake account */
  validatorStake: Address<TAccountValidatorStake>;
  /** Validator stake account */
  validatorStakeAuthority: Address<TAccountValidatorStakeAuthority>;
  /** Token account */
  sourceTokenAccount: Address<TAccountSourceTokenAccount>;
  /** Owner or delegate of the token account */
  sourceTokenAccountAuthority: TransactionSigner<TAccountSourceTokenAccountAuthority>;
  /** Stake Token Mint */
  mint: Address<TAccountMint>;
  /** Stake vault pda */
  vaultPda: Address<TAccountVaultPda>;
  /** Stake token Vault */
  vault: Address<TAccountVault>;
  /** Holder rewards for the vault account (to facilitate harvest) */
  vaultHolderRewards: Address<TAccountVaultHolderRewards>;
  /** Token program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Paladin rewards program */
  rewardsProgram: Address<TAccountRewardsProgram>;
  amount: ValidatorStakeTokensInstructionDataArgs['amount'];
};

export function getValidatorStakeTokensInstruction<
  TAccountConfig extends string,
  TAccountHolderRewardsPool extends string,
  TAccountHolderRewardsPoolTokenAccount extends string,
  TAccountValidatorStake extends string,
  TAccountValidatorStakeAuthority extends string,
  TAccountSourceTokenAccount extends string,
  TAccountSourceTokenAccountAuthority extends string,
  TAccountMint extends string,
  TAccountVaultPda extends string,
  TAccountVault extends string,
  TAccountVaultHolderRewards extends string,
  TAccountTokenProgram extends string,
  TAccountRewardsProgram extends string,
  TProgramAddress extends
    Address = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
>(
  input: ValidatorStakeTokensInput<
    TAccountConfig,
    TAccountHolderRewardsPool,
    TAccountHolderRewardsPoolTokenAccount,
    TAccountValidatorStake,
    TAccountValidatorStakeAuthority,
    TAccountSourceTokenAccount,
    TAccountSourceTokenAccountAuthority,
    TAccountMint,
    TAccountVaultPda,
    TAccountVault,
    TAccountVaultHolderRewards,
    TAccountTokenProgram,
    TAccountRewardsProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ValidatorStakeTokensInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountHolderRewardsPool,
  TAccountHolderRewardsPoolTokenAccount,
  TAccountValidatorStake,
  TAccountValidatorStakeAuthority,
  TAccountSourceTokenAccount,
  TAccountSourceTokenAccountAuthority,
  TAccountMint,
  TAccountVaultPda,
  TAccountVault,
  TAccountVaultHolderRewards,
  TAccountTokenProgram,
  TAccountRewardsProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    holderRewardsPool: {
      value: input.holderRewardsPool ?? null,
      isWritable: true,
    },
    holderRewardsPoolTokenAccount: {
      value: input.holderRewardsPoolTokenAccount ?? null,
      isWritable: true,
    },
    validatorStake: { value: input.validatorStake ?? null, isWritable: true },
    validatorStakeAuthority: {
      value: input.validatorStakeAuthority ?? null,
      isWritable: false,
    },
    sourceTokenAccount: {
      value: input.sourceTokenAccount ?? null,
      isWritable: true,
    },
    sourceTokenAccountAuthority: {
      value: input.sourceTokenAccountAuthority ?? null,
      isWritable: false,
    },
    mint: { value: input.mint ?? null, isWritable: false },
    vaultPda: { value: input.vaultPda ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    vaultHolderRewards: {
      value: input.vaultHolderRewards ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rewardsProgram: { value: input.rewardsProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.holderRewardsPool),
      getAccountMeta(accounts.holderRewardsPoolTokenAccount),
      getAccountMeta(accounts.validatorStake),
      getAccountMeta(accounts.validatorStakeAuthority),
      getAccountMeta(accounts.sourceTokenAccount),
      getAccountMeta(accounts.sourceTokenAccountAuthority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.vaultPda),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.vaultHolderRewards),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rewardsProgram),
    ],
    programAddress,
    data: getValidatorStakeTokensInstructionDataEncoder().encode(
      args as ValidatorStakeTokensInstructionDataArgs
    ),
  } as ValidatorStakeTokensInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountHolderRewardsPool,
    TAccountHolderRewardsPoolTokenAccount,
    TAccountValidatorStake,
    TAccountValidatorStakeAuthority,
    TAccountSourceTokenAccount,
    TAccountSourceTokenAccountAuthority,
    TAccountMint,
    TAccountVaultPda,
    TAccountVault,
    TAccountVaultHolderRewards,
    TAccountTokenProgram,
    TAccountRewardsProgram
  >;

  return instruction;
}

export type ParsedValidatorStakeTokensInstruction<
  TProgram extends string = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Stake config account */
    config: TAccountMetas[0];
    /** Holder rewards pool account */
    holderRewardsPool: TAccountMetas[1];
    /** Holder rewards pool account token account */
    holderRewardsPoolTokenAccount: TAccountMetas[2];
    /** Validator stake account */
    validatorStake: TAccountMetas[3];
    /** Validator stake account */
    validatorStakeAuthority: TAccountMetas[4];
    /** Token account */
    sourceTokenAccount: TAccountMetas[5];
    /** Owner or delegate of the token account */
    sourceTokenAccountAuthority: TAccountMetas[6];
    /** Stake Token Mint */
    mint: TAccountMetas[7];
    /** Stake vault pda */
    vaultPda: TAccountMetas[8];
    /** Stake token Vault */
    vault: TAccountMetas[9];
    /** Holder rewards for the vault account (to facilitate harvest) */
    vaultHolderRewards: TAccountMetas[10];
    /** Token program */
    tokenProgram: TAccountMetas[11];
    /** Paladin rewards program */
    rewardsProgram: TAccountMetas[12];
  };
  data: ValidatorStakeTokensInstructionData;
};

export function parseValidatorStakeTokensInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedValidatorStakeTokensInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      holderRewardsPool: getNextAccount(),
      holderRewardsPoolTokenAccount: getNextAccount(),
      validatorStake: getNextAccount(),
      validatorStakeAuthority: getNextAccount(),
      sourceTokenAccount: getNextAccount(),
      sourceTokenAccountAuthority: getNextAccount(),
      mint: getNextAccount(),
      vaultPda: getNextAccount(),
      vault: getNextAccount(),
      vaultHolderRewards: getNextAccount(),
      tokenProgram: getNextAccount(),
      rewardsProgram: getNextAccount(),
    },
    data: getValidatorStakeTokensInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
