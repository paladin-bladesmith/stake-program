/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UNSTAKE_TOKENS_DISCRIMINATOR = 11;

export function getUnstakeTokensDiscriminatorBytes() {
  return getU8Encoder().encode(UNSTAKE_TOKENS_DISCRIMINATOR);
}

export type UnstakeTokensInstruction<
  TProgram extends string = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountHolderRewardsPool extends string | IAccountMeta<string> = string,
  TAccountHolderRewardsPoolTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountStake extends string | IAccountMeta<string> = string,
  TAccountStakeAuthority extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountVaultPda extends string | IAccountMeta<string> = string,
  TAccountVaultHolderRewards extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountDestinationTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountRewardsProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountHolderRewardsPool extends string
        ? WritableAccount<TAccountHolderRewardsPool>
        : TAccountHolderRewardsPool,
      TAccountHolderRewardsPoolTokenAccount extends string
        ? WritableAccount<TAccountHolderRewardsPoolTokenAccount>
        : TAccountHolderRewardsPoolTokenAccount,
      TAccountStake extends string
        ? WritableAccount<TAccountStake>
        : TAccountStake,
      TAccountStakeAuthority extends string
        ? WritableSignerAccount<TAccountStakeAuthority> &
            IAccountSignerMeta<TAccountStakeAuthority>
        : TAccountStakeAuthority,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountVaultPda extends string
        ? WritableAccount<TAccountVaultPda>
        : TAccountVaultPda,
      TAccountVaultHolderRewards extends string
        ? WritableAccount<TAccountVaultHolderRewards>
        : TAccountVaultHolderRewards,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountDestinationTokenAccount extends string
        ? WritableAccount<TAccountDestinationTokenAccount>
        : TAccountDestinationTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountRewardsProgram extends string
        ? ReadonlyAccount<TAccountRewardsProgram>
        : TAccountRewardsProgram,
      ...TRemainingAccounts,
    ]
  >;

export type UnstakeTokensInstructionData = {
  discriminator: number;
  amount: bigint;
};

export type UnstakeTokensInstructionDataArgs = { amount: number | bigint };

export function getUnstakeTokensInstructionDataEncoder(): Encoder<UnstakeTokensInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: UNSTAKE_TOKENS_DISCRIMINATOR })
  );
}

export function getUnstakeTokensInstructionDataDecoder(): Decoder<UnstakeTokensInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['amount', getU64Decoder()],
  ]);
}

export function getUnstakeTokensInstructionDataCodec(): Codec<
  UnstakeTokensInstructionDataArgs,
  UnstakeTokensInstructionData
> {
  return combineCodec(
    getUnstakeTokensInstructionDataEncoder(),
    getUnstakeTokensInstructionDataDecoder()
  );
}

export type UnstakeTokensInput<
  TAccountConfig extends string = string,
  TAccountHolderRewardsPool extends string = string,
  TAccountHolderRewardsPoolTokenAccount extends string = string,
  TAccountStake extends string = string,
  TAccountStakeAuthority extends string = string,
  TAccountVault extends string = string,
  TAccountVaultPda extends string = string,
  TAccountVaultHolderRewards extends string = string,
  TAccountMint extends string = string,
  TAccountDestinationTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRewardsProgram extends string = string,
> = {
  /** Stake config account */
  config: Address<TAccountConfig>;
  /** Holder rewards pool account */
  holderRewardsPool: Address<TAccountHolderRewardsPool>;
  /** Holder rewards pool account token account */
  holderRewardsPoolTokenAccount: Address<TAccountHolderRewardsPoolTokenAccount>;
  /** Sol staker/validator stake account */
  stake: Address<TAccountStake>;
  /** Stake authority account */
  stakeAuthority: TransactionSigner<TAccountStakeAuthority>;
  /** Vault account */
  vault: Address<TAccountVault>;
  /** Vault authority */
  vaultPda: Address<TAccountVaultPda>;
  /** Vault holder rewards account */
  vaultHolderRewards: Address<TAccountVaultHolderRewards>;
  /** Mint account */
  mint: Address<TAccountMint>;
  /** Destination token account */
  destinationTokenAccount: Address<TAccountDestinationTokenAccount>;
  /** Token program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Paladin rewards program */
  rewardsProgram: Address<TAccountRewardsProgram>;
  amount: UnstakeTokensInstructionDataArgs['amount'];
};

export function getUnstakeTokensInstruction<
  TAccountConfig extends string,
  TAccountHolderRewardsPool extends string,
  TAccountHolderRewardsPoolTokenAccount extends string,
  TAccountStake extends string,
  TAccountStakeAuthority extends string,
  TAccountVault extends string,
  TAccountVaultPda extends string,
  TAccountVaultHolderRewards extends string,
  TAccountMint extends string,
  TAccountDestinationTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountRewardsProgram extends string,
  TProgramAddress extends
    Address = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
>(
  input: UnstakeTokensInput<
    TAccountConfig,
    TAccountHolderRewardsPool,
    TAccountHolderRewardsPoolTokenAccount,
    TAccountStake,
    TAccountStakeAuthority,
    TAccountVault,
    TAccountVaultPda,
    TAccountVaultHolderRewards,
    TAccountMint,
    TAccountDestinationTokenAccount,
    TAccountTokenProgram,
    TAccountRewardsProgram
  >,
  config?: { programAddress?: TProgramAddress }
): UnstakeTokensInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountHolderRewardsPool,
  TAccountHolderRewardsPoolTokenAccount,
  TAccountStake,
  TAccountStakeAuthority,
  TAccountVault,
  TAccountVaultPda,
  TAccountVaultHolderRewards,
  TAccountMint,
  TAccountDestinationTokenAccount,
  TAccountTokenProgram,
  TAccountRewardsProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    holderRewardsPool: {
      value: input.holderRewardsPool ?? null,
      isWritable: true,
    },
    holderRewardsPoolTokenAccount: {
      value: input.holderRewardsPoolTokenAccount ?? null,
      isWritable: true,
    },
    stake: { value: input.stake ?? null, isWritable: true },
    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    vaultPda: { value: input.vaultPda ?? null, isWritable: true },
    vaultHolderRewards: {
      value: input.vaultHolderRewards ?? null,
      isWritable: true,
    },
    mint: { value: input.mint ?? null, isWritable: false },
    destinationTokenAccount: {
      value: input.destinationTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rewardsProgram: { value: input.rewardsProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.holderRewardsPool),
      getAccountMeta(accounts.holderRewardsPoolTokenAccount),
      getAccountMeta(accounts.stake),
      getAccountMeta(accounts.stakeAuthority),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.vaultPda),
      getAccountMeta(accounts.vaultHolderRewards),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.destinationTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rewardsProgram),
    ],
    programAddress,
    data: getUnstakeTokensInstructionDataEncoder().encode(
      args as UnstakeTokensInstructionDataArgs
    ),
  } as UnstakeTokensInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountHolderRewardsPool,
    TAccountHolderRewardsPoolTokenAccount,
    TAccountStake,
    TAccountStakeAuthority,
    TAccountVault,
    TAccountVaultPda,
    TAccountVaultHolderRewards,
    TAccountMint,
    TAccountDestinationTokenAccount,
    TAccountTokenProgram,
    TAccountRewardsProgram
  >;

  return instruction;
}

export type ParsedUnstakeTokensInstruction<
  TProgram extends string = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Stake config account */
    config: TAccountMetas[0];
    /** Holder rewards pool account */
    holderRewardsPool: TAccountMetas[1];
    /** Holder rewards pool account token account */
    holderRewardsPoolTokenAccount: TAccountMetas[2];
    /** Sol staker/validator stake account */
    stake: TAccountMetas[3];
    /** Stake authority account */
    stakeAuthority: TAccountMetas[4];
    /** Vault account */
    vault: TAccountMetas[5];
    /** Vault authority */
    vaultPda: TAccountMetas[6];
    /** Vault holder rewards account */
    vaultHolderRewards: TAccountMetas[7];
    /** Mint account */
    mint: TAccountMetas[8];
    /** Destination token account */
    destinationTokenAccount: TAccountMetas[9];
    /** Token program */
    tokenProgram: TAccountMetas[10];
    /** Paladin rewards program */
    rewardsProgram: TAccountMetas[11];
  };
  data: UnstakeTokensInstructionData;
};

export function parseUnstakeTokensInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUnstakeTokensInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      holderRewardsPool: getNextAccount(),
      holderRewardsPoolTokenAccount: getNextAccount(),
      stake: getNextAccount(),
      stakeAuthority: getNextAccount(),
      vault: getNextAccount(),
      vaultPda: getNextAccount(),
      vaultHolderRewards: getNextAccount(),
      mint: getNextAccount(),
      destinationTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      rewardsProgram: getNextAccount(),
    },
    data: getUnstakeTokensInstructionDataDecoder().decode(instruction.data),
  };
}
