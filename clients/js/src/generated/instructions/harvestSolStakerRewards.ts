/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/web3.js';
import { PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const HARVEST_SOL_STAKER_REWARDS_DISCRIMINATOR = 10;

export function getHarvestSolStakerRewardsDiscriminatorBytes() {
  return getU8Encoder().encode(HARVEST_SOL_STAKER_REWARDS_DISCRIMINATOR);
}

export type HarvestSolStakerRewardsInstruction<
  TProgram extends string = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountSolStakeViewProgram extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountVaultHolderRewards extends string | IAccountMeta<string> = string,
  TAccountSolStakerStake extends string | IAccountMeta<string> = string,
  TAccountSolStakerStakeAuthority extends
    | string
    | IAccountMeta<string> = string,
  TAccountSolStakerNativeStake extends string | IAccountMeta<string> = string,
  TAccountPreviousValidatorStake extends string | IAccountMeta<string> = string,
  TAccountPreviousValidatorStakeAuthority extends
    | string
    | IAccountMeta<string> = string,
  TAccountCurrentValidatorStake extends string | IAccountMeta<string> = string,
  TAccountCurrentValidatorStakeAuthority extends
    | string
    | IAccountMeta<string> = string,
  TAccountSysvarStakeHistory extends
    | string
    | IAccountMeta<string> = 'SysvarStakeHistory1111111111111111111111111',
  TAccountKeeperRecipient extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSolStakeViewProgram extends string
        ? ReadonlyAccount<TAccountSolStakeViewProgram>
        : TAccountSolStakeViewProgram,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountVaultHolderRewards extends string
        ? ReadonlyAccount<TAccountVaultHolderRewards>
        : TAccountVaultHolderRewards,
      TAccountSolStakerStake extends string
        ? WritableAccount<TAccountSolStakerStake>
        : TAccountSolStakerStake,
      TAccountSolStakerStakeAuthority extends string
        ? WritableAccount<TAccountSolStakerStakeAuthority>
        : TAccountSolStakerStakeAuthority,
      TAccountSolStakerNativeStake extends string
        ? ReadonlyAccount<TAccountSolStakerNativeStake>
        : TAccountSolStakerNativeStake,
      TAccountPreviousValidatorStake extends string
        ? WritableAccount<TAccountPreviousValidatorStake>
        : TAccountPreviousValidatorStake,
      TAccountPreviousValidatorStakeAuthority extends string
        ? WritableAccount<TAccountPreviousValidatorStakeAuthority>
        : TAccountPreviousValidatorStakeAuthority,
      TAccountCurrentValidatorStake extends string
        ? WritableAccount<TAccountCurrentValidatorStake>
        : TAccountCurrentValidatorStake,
      TAccountCurrentValidatorStakeAuthority extends string
        ? WritableAccount<TAccountCurrentValidatorStakeAuthority>
        : TAccountCurrentValidatorStakeAuthority,
      TAccountSysvarStakeHistory extends string
        ? ReadonlyAccount<TAccountSysvarStakeHistory>
        : TAccountSysvarStakeHistory,
      TAccountKeeperRecipient extends string
        ? WritableAccount<TAccountKeeperRecipient>
        : TAccountKeeperRecipient,
      ...TRemainingAccounts,
    ]
  >;

export type HarvestSolStakerRewardsInstructionData = { discriminator: number };

export type HarvestSolStakerRewardsInstructionDataArgs = {};

export function getHarvestSolStakerRewardsInstructionDataEncoder(): Encoder<HarvestSolStakerRewardsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: HARVEST_SOL_STAKER_REWARDS_DISCRIMINATOR,
    })
  );
}

export function getHarvestSolStakerRewardsInstructionDataDecoder(): Decoder<HarvestSolStakerRewardsInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getHarvestSolStakerRewardsInstructionDataCodec(): Codec<
  HarvestSolStakerRewardsInstructionDataArgs,
  HarvestSolStakerRewardsInstructionData
> {
  return combineCodec(
    getHarvestSolStakerRewardsInstructionDataEncoder(),
    getHarvestSolStakerRewardsInstructionDataDecoder()
  );
}

export type HarvestSolStakerRewardsInput<
  TAccountSolStakeViewProgram extends string = string,
  TAccountConfig extends string = string,
  TAccountVaultHolderRewards extends string = string,
  TAccountSolStakerStake extends string = string,
  TAccountSolStakerStakeAuthority extends string = string,
  TAccountSolStakerNativeStake extends string = string,
  TAccountPreviousValidatorStake extends string = string,
  TAccountPreviousValidatorStakeAuthority extends string = string,
  TAccountCurrentValidatorStake extends string = string,
  TAccountCurrentValidatorStakeAuthority extends string = string,
  TAccountSysvarStakeHistory extends string = string,
  TAccountKeeperRecipient extends string = string,
> = {
  /** Sol stake view program */
  solStakeViewProgram: Address<TAccountSolStakeViewProgram>;
  /** Stake config account */
  config: Address<TAccountConfig>;
  /** Holder rewards account */
  vaultHolderRewards: Address<TAccountVaultHolderRewards>;
  /** SOL staker stake account */
  solStakerStake: Address<TAccountSolStakerStake>;
  /** SOL staker stake authority */
  solStakerStakeAuthority: Address<TAccountSolStakerStakeAuthority>;
  /** Native stake account */
  solStakerNativeStake: Address<TAccountSolStakerNativeStake>;
  /** Validator stake account */
  previousValidatorStake: Address<TAccountPreviousValidatorStake>;
  /** Validator stake authority */
  previousValidatorStakeAuthority: Address<TAccountPreviousValidatorStakeAuthority>;
  /** Validator stake account */
  currentValidatorStake: Address<TAccountCurrentValidatorStake>;
  /** Validator stake authority */
  currentValidatorStakeAuthority: Address<TAccountCurrentValidatorStakeAuthority>;
  /** Stake history sysvar */
  sysvarStakeHistory?: Address<TAccountSysvarStakeHistory>;
  /** Recipient for sol sync bounty */
  keeperRecipient?: Address<TAccountKeeperRecipient>;
};

export function getHarvestSolStakerRewardsInstruction<
  TAccountSolStakeViewProgram extends string,
  TAccountConfig extends string,
  TAccountVaultHolderRewards extends string,
  TAccountSolStakerStake extends string,
  TAccountSolStakerStakeAuthority extends string,
  TAccountSolStakerNativeStake extends string,
  TAccountPreviousValidatorStake extends string,
  TAccountPreviousValidatorStakeAuthority extends string,
  TAccountCurrentValidatorStake extends string,
  TAccountCurrentValidatorStakeAuthority extends string,
  TAccountSysvarStakeHistory extends string,
  TAccountKeeperRecipient extends string,
>(
  input: HarvestSolStakerRewardsInput<
    TAccountSolStakeViewProgram,
    TAccountConfig,
    TAccountVaultHolderRewards,
    TAccountSolStakerStake,
    TAccountSolStakerStakeAuthority,
    TAccountSolStakerNativeStake,
    TAccountPreviousValidatorStake,
    TAccountPreviousValidatorStakeAuthority,
    TAccountCurrentValidatorStake,
    TAccountCurrentValidatorStakeAuthority,
    TAccountSysvarStakeHistory,
    TAccountKeeperRecipient
  >
): HarvestSolStakerRewardsInstruction<
  typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountSolStakeViewProgram,
  TAccountConfig,
  TAccountVaultHolderRewards,
  TAccountSolStakerStake,
  TAccountSolStakerStakeAuthority,
  TAccountSolStakerNativeStake,
  TAccountPreviousValidatorStake,
  TAccountPreviousValidatorStakeAuthority,
  TAccountCurrentValidatorStake,
  TAccountCurrentValidatorStakeAuthority,
  TAccountSysvarStakeHistory,
  TAccountKeeperRecipient
> {
  // Program address.
  const programAddress = PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    solStakeViewProgram: {
      value: input.solStakeViewProgram ?? null,
      isWritable: false,
    },
    config: { value: input.config ?? null, isWritable: true },
    vaultHolderRewards: {
      value: input.vaultHolderRewards ?? null,
      isWritable: false,
    },
    solStakerStake: { value: input.solStakerStake ?? null, isWritable: true },
    solStakerStakeAuthority: {
      value: input.solStakerStakeAuthority ?? null,
      isWritable: true,
    },
    solStakerNativeStake: {
      value: input.solStakerNativeStake ?? null,
      isWritable: false,
    },
    previousValidatorStake: {
      value: input.previousValidatorStake ?? null,
      isWritable: true,
    },
    previousValidatorStakeAuthority: {
      value: input.previousValidatorStakeAuthority ?? null,
      isWritable: true,
    },
    currentValidatorStake: {
      value: input.currentValidatorStake ?? null,
      isWritable: true,
    },
    currentValidatorStakeAuthority: {
      value: input.currentValidatorStakeAuthority ?? null,
      isWritable: true,
    },
    sysvarStakeHistory: {
      value: input.sysvarStakeHistory ?? null,
      isWritable: false,
    },
    keeperRecipient: { value: input.keeperRecipient ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.sysvarStakeHistory.value) {
    accounts.sysvarStakeHistory.value =
      'SysvarStakeHistory1111111111111111111111111' as Address<'SysvarStakeHistory1111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.solStakeViewProgram),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.vaultHolderRewards),
      getAccountMeta(accounts.solStakerStake),
      getAccountMeta(accounts.solStakerStakeAuthority),
      getAccountMeta(accounts.solStakerNativeStake),
      getAccountMeta(accounts.previousValidatorStake),
      getAccountMeta(accounts.previousValidatorStakeAuthority),
      getAccountMeta(accounts.currentValidatorStake),
      getAccountMeta(accounts.currentValidatorStakeAuthority),
      getAccountMeta(accounts.sysvarStakeHistory),
      getAccountMeta(accounts.keeperRecipient),
    ],
    programAddress,
    data: getHarvestSolStakerRewardsInstructionDataEncoder().encode({}),
  } as HarvestSolStakerRewardsInstruction<
    typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
    TAccountSolStakeViewProgram,
    TAccountConfig,
    TAccountVaultHolderRewards,
    TAccountSolStakerStake,
    TAccountSolStakerStakeAuthority,
    TAccountSolStakerNativeStake,
    TAccountPreviousValidatorStake,
    TAccountPreviousValidatorStakeAuthority,
    TAccountCurrentValidatorStake,
    TAccountCurrentValidatorStakeAuthority,
    TAccountSysvarStakeHistory,
    TAccountKeeperRecipient
  >;

  return instruction;
}

export type ParsedHarvestSolStakerRewardsInstruction<
  TProgram extends string = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Sol stake view program */
    solStakeViewProgram: TAccountMetas[0];
    /** Stake config account */
    config: TAccountMetas[1];
    /** Holder rewards account */
    vaultHolderRewards: TAccountMetas[2];
    /** SOL staker stake account */
    solStakerStake: TAccountMetas[3];
    /** SOL staker stake authority */
    solStakerStakeAuthority: TAccountMetas[4];
    /** Native stake account */
    solStakerNativeStake: TAccountMetas[5];
    /** Validator stake account */
    previousValidatorStake: TAccountMetas[6];
    /** Validator stake authority */
    previousValidatorStakeAuthority: TAccountMetas[7];
    /** Validator stake account */
    currentValidatorStake: TAccountMetas[8];
    /** Validator stake authority */
    currentValidatorStakeAuthority: TAccountMetas[9];
    /** Stake history sysvar */
    sysvarStakeHistory: TAccountMetas[10];
    /** Recipient for sol sync bounty */
    keeperRecipient?: TAccountMetas[11] | undefined;
  };
  data: HarvestSolStakerRewardsInstructionData;
};

export function parseHarvestSolStakerRewardsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedHarvestSolStakerRewardsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      solStakeViewProgram: getNextAccount(),
      config: getNextAccount(),
      vaultHolderRewards: getNextAccount(),
      solStakerStake: getNextAccount(),
      solStakerStakeAuthority: getNextAccount(),
      solStakerNativeStake: getNextAccount(),
      previousValidatorStake: getNextAccount(),
      previousValidatorStakeAuthority: getNextAccount(),
      currentValidatorStake: getNextAccount(),
      currentValidatorStakeAuthority: getNextAccount(),
      sysvarStakeHistory: getNextAccount(),
      keeperRecipient: getNextOptionalAccount(),
    },
    data: getHarvestSolStakerRewardsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
