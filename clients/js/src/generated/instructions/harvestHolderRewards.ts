/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/web3.js';
import { PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type HarvestHolderRewardsInstruction<
  TProgram extends string = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountHolderRewardsPool extends string | IAccountMeta<string> = string,
  TAccountHolderRewards extends string | IAccountMeta<string> = string,
  TAccountVaultAuthority extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountPaladinRewardsProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountHolderRewardsPool extends string
        ? WritableAccount<TAccountHolderRewardsPool>
        : TAccountHolderRewardsPool,
      TAccountHolderRewards extends string
        ? WritableAccount<TAccountHolderRewards>
        : TAccountHolderRewards,
      TAccountVaultAuthority extends string
        ? ReadonlyAccount<TAccountVaultAuthority>
        : TAccountVaultAuthority,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountPaladinRewardsProgram extends string
        ? ReadonlyAccount<TAccountPaladinRewardsProgram>
        : TAccountPaladinRewardsProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type HarvestHolderRewardsInstructionData = { discriminator: number };

export type HarvestHolderRewardsInstructionDataArgs = {};

export function getHarvestHolderRewardsInstructionDataEncoder(): Encoder<HarvestHolderRewardsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: 6 })
  );
}

export function getHarvestHolderRewardsInstructionDataDecoder(): Decoder<HarvestHolderRewardsInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getHarvestHolderRewardsInstructionDataCodec(): Codec<
  HarvestHolderRewardsInstructionDataArgs,
  HarvestHolderRewardsInstructionData
> {
  return combineCodec(
    getHarvestHolderRewardsInstructionDataEncoder(),
    getHarvestHolderRewardsInstructionDataDecoder()
  );
}

export type HarvestHolderRewardsInput<
  TAccountConfig extends string = string,
  TAccountVault extends string = string,
  TAccountHolderRewardsPool extends string = string,
  TAccountHolderRewards extends string = string,
  TAccountVaultAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountPaladinRewardsProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Stake config account */
  config: Address<TAccountConfig>;
  /** Vault token account */
  vault: Address<TAccountVault>;
  /** Holder rewards pool account */
  holderRewardsPool: Address<TAccountHolderRewardsPool>;
  /** Holder rewards account for vault token account */
  holderRewards: Address<TAccountHolderRewards>;
  /** Vault authority (pda of `['token-owner', config]`) */
  vaultAuthority: Address<TAccountVaultAuthority>;
  /** Stake token mint */
  mint: Address<TAccountMint>;
  /** Token program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Paladin rewards program */
  paladinRewardsProgram: Address<TAccountPaladinRewardsProgram>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getHarvestHolderRewardsInstruction<
  TAccountConfig extends string,
  TAccountVault extends string,
  TAccountHolderRewardsPool extends string,
  TAccountHolderRewards extends string,
  TAccountVaultAuthority extends string,
  TAccountMint extends string,
  TAccountTokenProgram extends string,
  TAccountPaladinRewardsProgram extends string,
  TAccountSystemProgram extends string,
>(
  input: HarvestHolderRewardsInput<
    TAccountConfig,
    TAccountVault,
    TAccountHolderRewardsPool,
    TAccountHolderRewards,
    TAccountVaultAuthority,
    TAccountMint,
    TAccountTokenProgram,
    TAccountPaladinRewardsProgram,
    TAccountSystemProgram
  >
): HarvestHolderRewardsInstruction<
  typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountConfig,
  TAccountVault,
  TAccountHolderRewardsPool,
  TAccountHolderRewards,
  TAccountVaultAuthority,
  TAccountMint,
  TAccountTokenProgram,
  TAccountPaladinRewardsProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    holderRewardsPool: {
      value: input.holderRewardsPool ?? null,
      isWritable: true,
    },
    holderRewards: { value: input.holderRewards ?? null, isWritable: true },
    vaultAuthority: { value: input.vaultAuthority ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    paladinRewardsProgram: {
      value: input.paladinRewardsProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.holderRewardsPool),
      getAccountMeta(accounts.holderRewards),
      getAccountMeta(accounts.vaultAuthority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.paladinRewardsProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getHarvestHolderRewardsInstructionDataEncoder().encode({}),
  } as HarvestHolderRewardsInstruction<
    typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
    TAccountConfig,
    TAccountVault,
    TAccountHolderRewardsPool,
    TAccountHolderRewards,
    TAccountVaultAuthority,
    TAccountMint,
    TAccountTokenProgram,
    TAccountPaladinRewardsProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedHarvestHolderRewardsInstruction<
  TProgram extends string = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Stake config account */
    config: TAccountMetas[0];
    /** Vault token account */
    vault: TAccountMetas[1];
    /** Holder rewards pool account */
    holderRewardsPool: TAccountMetas[2];
    /** Holder rewards account for vault token account */
    holderRewards: TAccountMetas[3];
    /** Vault authority (pda of `['token-owner', config]`) */
    vaultAuthority: TAccountMetas[4];
    /** Stake token mint */
    mint: TAccountMetas[5];
    /** Token program */
    tokenProgram: TAccountMetas[6];
    /** Paladin rewards program */
    paladinRewardsProgram: TAccountMetas[7];
    /** System program */
    systemProgram: TAccountMetas[8];
  };
  data: HarvestHolderRewardsInstructionData;
};

export function parseHarvestHolderRewardsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedHarvestHolderRewardsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      vault: getNextAccount(),
      holderRewardsPool: getNextAccount(),
      holderRewards: getNextAccount(),
      vaultAuthority: getNextAccount(),
      mint: getNextAccount(),
      tokenProgram: getNextAccount(),
      paladinRewardsProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getHarvestHolderRewardsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
