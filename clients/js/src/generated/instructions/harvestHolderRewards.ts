/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
} from '@solana/web3.js';
import { PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const HARVEST_HOLDER_REWARDS_DISCRIMINATOR = 3;

export function getHarvestHolderRewardsDiscriminatorBytes() {
  return getU8Encoder().encode(HARVEST_HOLDER_REWARDS_DISCRIMINATOR);
}

export type HarvestHolderRewardsInstruction<
  TProgram extends string = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountHolderRewardsPool extends string | IAccountMeta<string> = string,
  TAccountHolderRewardsPoolTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountVaultHolderRewards extends string | IAccountMeta<string> = string,
  TAccountVaultPda extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountPaladinRewardsProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountHolderRewardsPool extends string
        ? WritableAccount<TAccountHolderRewardsPool>
        : TAccountHolderRewardsPool,
      TAccountHolderRewardsPoolTokenAccount extends string
        ? ReadonlyAccount<TAccountHolderRewardsPoolTokenAccount>
        : TAccountHolderRewardsPoolTokenAccount,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountVaultHolderRewards extends string
        ? WritableAccount<TAccountVaultHolderRewards>
        : TAccountVaultHolderRewards,
      TAccountVaultPda extends string
        ? WritableAccount<TAccountVaultPda>
        : TAccountVaultPda,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountPaladinRewardsProgram extends string
        ? ReadonlyAccount<TAccountPaladinRewardsProgram>
        : TAccountPaladinRewardsProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type HarvestHolderRewardsInstructionData = { discriminator: number };

export type HarvestHolderRewardsInstructionDataArgs = {};

export function getHarvestHolderRewardsInstructionDataEncoder(): Encoder<HarvestHolderRewardsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: HARVEST_HOLDER_REWARDS_DISCRIMINATOR,
    })
  );
}

export function getHarvestHolderRewardsInstructionDataDecoder(): Decoder<HarvestHolderRewardsInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getHarvestHolderRewardsInstructionDataCodec(): Codec<
  HarvestHolderRewardsInstructionDataArgs,
  HarvestHolderRewardsInstructionData
> {
  return combineCodec(
    getHarvestHolderRewardsInstructionDataEncoder(),
    getHarvestHolderRewardsInstructionDataDecoder()
  );
}

export type HarvestHolderRewardsInput<
  TAccountConfig extends string = string,
  TAccountHolderRewardsPool extends string = string,
  TAccountHolderRewardsPoolTokenAccount extends string = string,
  TAccountVault extends string = string,
  TAccountVaultHolderRewards extends string = string,
  TAccountVaultPda extends string = string,
  TAccountMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountPaladinRewardsProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Stake config account */
  config: Address<TAccountConfig>;
  /** Holder rewards pool account */
  holderRewardsPool: Address<TAccountHolderRewardsPool>;
  /** Holder rewards pool account token account */
  holderRewardsPoolTokenAccount: Address<TAccountHolderRewardsPoolTokenAccount>;
  /** Vault token account */
  vault: Address<TAccountVault>;
  /** Holder rewards account for vault token account */
  vaultHolderRewards: Address<TAccountVaultHolderRewards>;
  /** Vault pda */
  vaultPda: Address<TAccountVaultPda>;
  /** Stake token mint */
  mint: Address<TAccountMint>;
  /** Token program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** Paladin rewards program */
  paladinRewardsProgram: Address<TAccountPaladinRewardsProgram>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getHarvestHolderRewardsInstruction<
  TAccountConfig extends string,
  TAccountHolderRewardsPool extends string,
  TAccountHolderRewardsPoolTokenAccount extends string,
  TAccountVault extends string,
  TAccountVaultHolderRewards extends string,
  TAccountVaultPda extends string,
  TAccountMint extends string,
  TAccountTokenProgram extends string,
  TAccountPaladinRewardsProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
>(
  input: HarvestHolderRewardsInput<
    TAccountConfig,
    TAccountHolderRewardsPool,
    TAccountHolderRewardsPoolTokenAccount,
    TAccountVault,
    TAccountVaultHolderRewards,
    TAccountVaultPda,
    TAccountMint,
    TAccountTokenProgram,
    TAccountPaladinRewardsProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): HarvestHolderRewardsInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountHolderRewardsPool,
  TAccountHolderRewardsPoolTokenAccount,
  TAccountVault,
  TAccountVaultHolderRewards,
  TAccountVaultPda,
  TAccountMint,
  TAccountTokenProgram,
  TAccountPaladinRewardsProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    holderRewardsPool: {
      value: input.holderRewardsPool ?? null,
      isWritable: true,
    },
    holderRewardsPoolTokenAccount: {
      value: input.holderRewardsPoolTokenAccount ?? null,
      isWritable: false,
    },
    vault: { value: input.vault ?? null, isWritable: true },
    vaultHolderRewards: {
      value: input.vaultHolderRewards ?? null,
      isWritable: true,
    },
    vaultPda: { value: input.vaultPda ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    paladinRewardsProgram: {
      value: input.paladinRewardsProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.holderRewardsPool),
      getAccountMeta(accounts.holderRewardsPoolTokenAccount),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.vaultHolderRewards),
      getAccountMeta(accounts.vaultPda),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.paladinRewardsProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getHarvestHolderRewardsInstructionDataEncoder().encode({}),
  } as HarvestHolderRewardsInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountHolderRewardsPool,
    TAccountHolderRewardsPoolTokenAccount,
    TAccountVault,
    TAccountVaultHolderRewards,
    TAccountVaultPda,
    TAccountMint,
    TAccountTokenProgram,
    TAccountPaladinRewardsProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedHarvestHolderRewardsInstruction<
  TProgram extends string = typeof PALADIN_STAKE_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Stake config account */
    config: TAccountMetas[0];
    /** Holder rewards pool account */
    holderRewardsPool: TAccountMetas[1];
    /** Holder rewards pool account token account */
    holderRewardsPoolTokenAccount: TAccountMetas[2];
    /** Vault token account */
    vault: TAccountMetas[3];
    /** Holder rewards account for vault token account */
    vaultHolderRewards: TAccountMetas[4];
    /** Vault pda */
    vaultPda: TAccountMetas[5];
    /** Stake token mint */
    mint: TAccountMetas[6];
    /** Token program */
    tokenProgram: TAccountMetas[7];
    /** Paladin rewards program */
    paladinRewardsProgram: TAccountMetas[8];
    /** System program */
    systemProgram: TAccountMetas[9];
  };
  data: HarvestHolderRewardsInstructionData;
};

export function parseHarvestHolderRewardsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedHarvestHolderRewardsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      holderRewardsPool: getNextAccount(),
      holderRewardsPoolTokenAccount: getNextAccount(),
      vault: getNextAccount(),
      vaultHolderRewards: getNextAccount(),
      vaultPda: getNextAccount(),
      mint: getNextAccount(),
      tokenProgram: getNextAccount(),
      paladinRewardsProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getHarvestHolderRewardsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
