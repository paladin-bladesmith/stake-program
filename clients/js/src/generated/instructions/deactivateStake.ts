/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { STAKE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type DeactivateStakeInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,
  TAccountStake extends string | IAccountMeta<string> = string,
  TAccountStakeAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountStake extends string
        ? WritableAccount<TAccountStake>
        : TAccountStake,
      TAccountStakeAuthority extends string
        ? ReadonlySignerAccount<TAccountStakeAuthority> &
            IAccountSignerMeta<TAccountStakeAuthority>
        : TAccountStakeAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type DeactivateStakeInstructionData = {
  discriminator: number;
  amount: bigint;
};

export type DeactivateStakeInstructionDataArgs = { amount: number | bigint };

export function getDeactivateStakeInstructionDataEncoder(): Encoder<DeactivateStakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 3 })
  );
}

export function getDeactivateStakeInstructionDataDecoder(): Decoder<DeactivateStakeInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['amount', getU64Decoder()],
  ]);
}

export function getDeactivateStakeInstructionDataCodec(): Codec<
  DeactivateStakeInstructionDataArgs,
  DeactivateStakeInstructionData
> {
  return combineCodec(
    getDeactivateStakeInstructionDataEncoder(),
    getDeactivateStakeInstructionDataDecoder()
  );
}

export type DeactivateStakeInput<
  TAccountStake extends string = string,
  TAccountStakeAuthority extends string = string,
> = {
  /** Validator stake account (pda of `['stake::state::stake', validator, config]`) */
  stake: Address<TAccountStake>;
  /** Authority on validator stake account */
  stakeAuthority: TransactionSigner<TAccountStakeAuthority>;
  amount: DeactivateStakeInstructionDataArgs['amount'];
};

export function getDeactivateStakeInstruction<
  TAccountStake extends string,
  TAccountStakeAuthority extends string,
>(
  input: DeactivateStakeInput<TAccountStake, TAccountStakeAuthority>
): DeactivateStakeInstruction<
  typeof STAKE_PROGRAM_ADDRESS,
  TAccountStake,
  TAccountStakeAuthority
> {
  // Program address.
  const programAddress = STAKE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stake: { value: input.stake ?? null, isWritable: true },
    stakeAuthority: { value: input.stakeAuthority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stake),
      getAccountMeta(accounts.stakeAuthority),
    ],
    programAddress,
    data: getDeactivateStakeInstructionDataEncoder().encode(
      args as DeactivateStakeInstructionDataArgs
    ),
  } as DeactivateStakeInstruction<
    typeof STAKE_PROGRAM_ADDRESS,
    TAccountStake,
    TAccountStakeAuthority
  >;

  return instruction;
}

export type ParsedDeactivateStakeInstruction<
  TProgram extends string = typeof STAKE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Validator stake account (pda of `['stake::state::stake', validator, config]`) */
    stake: TAccountMetas[0];
    /** Authority on validator stake account */
    stakeAuthority: TAccountMetas[1];
  };
  data: DeactivateStakeInstructionData;
};

export function parseDeactivateStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDeactivateStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stake: getNextAccount(),
      stakeAuthority: getNextAccount(),
    },
    data: getDeactivateStakeInstructionDataDecoder().decode(instruction.data),
  };
}
