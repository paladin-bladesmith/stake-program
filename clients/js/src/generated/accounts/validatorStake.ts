/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';
import {
  getNullableU64Decoder,
  getNullableU64Encoder,
  type NullableU64,
  type NullableU64Args,
} from '../../hooked';

export type ValidatorStake = {
  discriminator: Array<number>;
  amount: bigint;
  deactivationTimestamp: NullableU64;
  deactivatingAmount: bigint;
  inactiveAmount: bigint;
  authority: Address;
  validatorVote: Address;
  lastSeenHolderRewardsPerToken: bigint;
  lastSeenStakeRewardsPerToken: bigint;
};

export type ValidatorStakeArgs = {
  discriminator: Array<number>;
  amount: number | bigint;
  deactivationTimestamp: NullableU64Args;
  deactivatingAmount: number | bigint;
  inactiveAmount: number | bigint;
  authority: Address;
  validatorVote: Address;
  lastSeenHolderRewardsPerToken: number | bigint;
  lastSeenStakeRewardsPerToken: number | bigint;
};

export function getValidatorStakeEncoder(): Encoder<ValidatorStakeArgs> {
  return getStructEncoder([
    ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
    ['amount', getU64Encoder()],
    ['deactivationTimestamp', getNullableU64Encoder()],
    ['deactivatingAmount', getU64Encoder()],
    ['inactiveAmount', getU64Encoder()],
    ['authority', getAddressEncoder()],
    ['validatorVote', getAddressEncoder()],
    ['lastSeenHolderRewardsPerToken', getU128Encoder()],
    ['lastSeenStakeRewardsPerToken', getU128Encoder()],
  ]);
}

export function getValidatorStakeDecoder(): Decoder<ValidatorStake> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['amount', getU64Decoder()],
    ['deactivationTimestamp', getNullableU64Decoder()],
    ['deactivatingAmount', getU64Decoder()],
    ['inactiveAmount', getU64Decoder()],
    ['authority', getAddressDecoder()],
    ['validatorVote', getAddressDecoder()],
    ['lastSeenHolderRewardsPerToken', getU128Decoder()],
    ['lastSeenStakeRewardsPerToken', getU128Decoder()],
  ]);
}

export function getValidatorStakeCodec(): Codec<
  ValidatorStakeArgs,
  ValidatorStake
> {
  return combineCodec(getValidatorStakeEncoder(), getValidatorStakeDecoder());
}

export function decodeValidatorStake<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ValidatorStake, TAddress>;
export function decodeValidatorStake<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ValidatorStake, TAddress>;
export function decodeValidatorStake<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<ValidatorStake, TAddress> | MaybeAccount<ValidatorStake, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getValidatorStakeDecoder()
  );
}

export async function fetchValidatorStake<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ValidatorStake, TAddress>> {
  const maybeAccount = await fetchMaybeValidatorStake(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeValidatorStake<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ValidatorStake, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeValidatorStake(maybeAccount);
}

export async function fetchAllValidatorStake(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ValidatorStake>[]> {
  const maybeAccounts = await fetchAllMaybeValidatorStake(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeValidatorStake(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ValidatorStake>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeValidatorStake(maybeAccount)
  );
}

export function getValidatorStakeSize(): number {
  return 136;
}
